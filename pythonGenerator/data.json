{
    "project": {
        "version": "0.6.1",
        "name": "EaselJS",
        "description": "EaselJS API.",
        "url": "http://www.createjs.com/#!/EaselJS",
        "logo": "http://createjs.com/resources/SuiteIcons/EaselJS/docs-icon-EaselJS.png"
    },
    "files": {
        "../src/easeljs/display/Bitmap.js": {
            "name": "../src/easeljs/display/Bitmap.js",
            "modules": {},
            "classes": {
                "Bitmap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/display/BitmapAnimation.js": {
            "name": "../src/easeljs/display/BitmapAnimation.js",
            "modules": {},
            "classes": {
                "BitmapAnimation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/display/Container.js": {
            "name": "../src/easeljs/display/Container.js",
            "modules": {},
            "classes": {
                "Container": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/display/DOMElement.js": {
            "name": "../src/easeljs/display/DOMElement.js",
            "modules": {},
            "classes": {
                "DOMElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/display/DisplayObject.js": {
            "name": "../src/easeljs/display/DisplayObject.js",
            "modules": {
                "EaselJS": 1
            },
            "classes": {
                "DisplayObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/display/Graphics.js": {
            "name": "../src/easeljs/display/Graphics.js",
            "modules": {},
            "classes": {
                "Command": 1,
                "Graphics": 1
            },
            "fors": {
                "Graphics": 1
            },
            "namespaces": {}
        },
        "../src/easeljs/display/MovieClip.js": {
            "name": "../src/easeljs/display/MovieClip.js",
            "modules": {},
            "classes": {
                "MovieClip": 1,
                "MovieClipPlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/display/Shadow.js": {
            "name": "../src/easeljs/display/Shadow.js",
            "modules": {},
            "classes": {
                "Shadow": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/display/Shape.js": {
            "name": "../src/easeljs/display/Shape.js",
            "modules": {},
            "classes": {
                "Shape": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/display/SpriteSheet.js": {
            "name": "../src/easeljs/display/SpriteSheet.js",
            "modules": {},
            "classes": {
                "SpriteSheet": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/display/Stage.js": {
            "name": "../src/easeljs/display/Stage.js",
            "modules": {},
            "classes": {
                "Stage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/display/Text.js": {
            "name": "../src/easeljs/display/Text.js",
            "modules": {},
            "classes": {
                "Text": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/events/EventDispatcher.js": {
            "name": "../src/easeljs/events/EventDispatcher.js",
            "modules": {},
            "classes": {
                "EventDispatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/events/MouseEvent.js": {
            "name": "../src/easeljs/events/MouseEvent.js",
            "modules": {},
            "classes": {
                "MouseEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/filters/AlphaMapFilter.js": {
            "name": "../src/easeljs/filters/AlphaMapFilter.js",
            "modules": {},
            "classes": {
                "AlphaMapFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/filters/AlphaMaskFilter.js": {
            "name": "../src/easeljs/filters/AlphaMaskFilter.js",
            "modules": {},
            "classes": {
                "AlphaMaskFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/filters/BoxBlurFilter.js": {
            "name": "../src/easeljs/filters/BoxBlurFilter.js",
            "modules": {},
            "classes": {
                "BoxBlurFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/filters/ColorFilter.js": {
            "name": "../src/easeljs/filters/ColorFilter.js",
            "modules": {},
            "classes": {
                "ColorFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/filters/ColorMatrix.js": {
            "name": "../src/easeljs/filters/ColorMatrix.js",
            "modules": {},
            "classes": {
                "ColorMatrix": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/filters/ColorMatrixFilter.js": {
            "name": "../src/easeljs/filters/ColorMatrixFilter.js",
            "modules": {},
            "classes": {
                "ColorMatrixFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/filters/Filter.js": {
            "name": "../src/easeljs/filters/Filter.js",
            "modules": {},
            "classes": {
                "Filter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/geom/Matrix2D.js": {
            "name": "../src/easeljs/geom/Matrix2D.js",
            "modules": {},
            "classes": {
                "Matrix2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/geom/Point.js": {
            "name": "../src/easeljs/geom/Point.js",
            "modules": {},
            "classes": {
                "Point": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/geom/Rectangle.js": {
            "name": "../src/easeljs/geom/Rectangle.js",
            "modules": {},
            "classes": {
                "Rectangle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/ui/ButtonHelper.js": {
            "name": "../src/easeljs/ui/ButtonHelper.js",
            "modules": {},
            "classes": {
                "ButtonHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/ui/Touch.js": {
            "name": "../src/easeljs/ui/Touch.js",
            "modules": {},
            "classes": {
                "Touch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/utils/Log.js": {
            "name": "../src/easeljs/utils/Log.js",
            "modules": {},
            "classes": {
                "Log": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/utils/SpriteSheetBuilder.js": {
            "name": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "modules": {},
            "classes": {
                "SpriteSheetBuilder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/utils/SpriteSheetUtils.js": {
            "name": "../src/easeljs/utils/SpriteSheetUtils.js",
            "modules": {},
            "classes": {
                "SpriteSheetUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/utils/Ticker.js": {
            "name": "../src/easeljs/utils/Ticker.js",
            "modules": {},
            "classes": {
                "Ticker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/utils/UID.js": {
            "name": "../src/easeljs/utils/UID.js",
            "modules": {},
            "classes": {
                "UID": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/version.js": {
            "name": "../src/easeljs/version.js",
            "modules": {},
            "classes": {
                "EaselJS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/easeljs/version_movieclip.js": {
            "name": "../src/easeljs/version_movieclip.js",
            "modules": {},
            "classes": {},
            "fors": {
                "MovieClip": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "EaselJS": {
            "name": "EaselJS",
            "submodules": {},
            "classes": {
                "Bitmap": 1,
                "BitmapAnimation": 1,
                "Container": 1,
                "DOMElement": 1,
                "DisplayObject": 1,
                "Command": 1,
                "Graphics": 1,
                "MovieClip": 1,
                "MovieClipPlugin": 1,
                "Shadow": 1,
                "Shape": 1,
                "SpriteSheet": 1,
                "Stage": 1,
                "Text": 1,
                "EventDispatcher": 1,
                "MouseEvent": 1,
                "AlphaMapFilter": 1,
                "AlphaMaskFilter": 1,
                "BoxBlurFilter": 1,
                "ColorFilter": 1,
                "ColorMatrix": 1,
                "ColorMatrixFilter": 1,
                "Filter": 1,
                "Matrix2D": 1,
                "Point": 1,
                "Rectangle": 1,
                "ButtonHelper": 1,
                "Touch": 1,
                "Log": 1,
                "SpriteSheetBuilder": 1,
                "SpriteSheetUtils": 1,
                "Ticker": 1,
                "UID": 1,
                "EaselJS": 1
            },
            "fors": {
                "Graphics": 1,
                "MovieClip": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "../src/easeljs/version.js",
            "line": 3,
            "description": "The EaselJS Javascript library provides a retained graphics mode for canvas including a full hierarchical display\nlist, a core interaction model, and helper classes to make working with 2D graphics in Canvas much easier.\nEaselJS provides straight forward solutions for working with rich graphics and interactivity with HTML5 Canvas...\n\n<h4>Getting Started</h4>\nTo get started with Easel, create a {{#crossLink \"Stage\"}}{{/crossLink}} that wraps a CANVAS element, and add\n{{#crossLink \"DisplayObject\"}}{{/crossLink}} instances as children. EaselJS supports:\n<ul>\n     <li>Images using {{#crossLink \"Bitmap\"}}{{/crossLink}}</li>\n     <li>Vector graphics using {{#crossLink \"Shape\"}}{{/crossLink}} and {{#crossLink \"Graphics\"}}{{/crossLink}}</li>\n     <li>Animated bitmaps using {{#crossLink \"SpriteSheet\"}}{{/crossLink}} and {{#crossLink \"BitmapAnimation\"}}{{/crossLink}}\n     <li>Simple text instances using {{#crossLink \"Text\"}}{{/crossLink}}</li>\n     <li>Containers that hold other DisplayObjects using {{#crossLink \"Container\"}}{{/crossLink}}</li>\n     <li>Control HTML DOM elements using {{#crossLink \"DOMElement\"}}{{/crossLink}}</li>\n</ul>\n\nAll display objects can be added to the stage as children, or drawn to a canvas directly.\n\n<b>User Interactions</b><br />\nAll display objects on stage (except DOMElement) will dispatch events when interacted with using a mouse or\ntouch. EaselJS supports hover, press, and release events, as well as an easy-to-use drag-and-drop model. Check out\n{{#crossLink \"MouseEvent\"}}{{/crossLink}} for more information.\n\n<h4>Simple Example</h4>\nThis example illustrates how to create and position a {{#crossLink \"Shape\"}}{{/crossLink}} on the {{#crossLink \"Stage\"}}{{/crossLink}}\nusing EaselJS' drawing API.\n\n\t    //Create a stage by getting a reference to the canvas\n\t    stage = new createjs.Stage(\"demoCanvas\");\n\t    //Create a Shape DisplayObject.\n\t    circle = new createjs.Shape();\n\t    circle.graphics.beginFill(\"red\").drawCircle(0, 0, 40);\n\t    //Set position of Shape instance.\n\t    circle.x = circle.y = 50;\n\t    //Add Shape instance to stage display list.\n\t    stage.addChild(circle);\n\t    //Update stage will render next frame\n\t    stage.update();\n\n<b>Simple Interaction Example</b><br>\n\n     displayObject.addEventListener(\"click\", handleClick);\n     function handleClick(event){\n         // Click happenened\n     }\n\n     displayObject.addEventListener(\"mousedown\", handlePress);\n     function handlePress(event) {\n         // A mouse press happened.\n         // Listen for mouse move while the mouse is down:\n         event.addEventListener(\"mousemove\", handleMove);\n     }\n     function handleMove(event) {\n         // Check out the DragAndDrop example in GitHub for more\n     }\n\n<b>Simple Animation Example</b><br />\nThis example moves the shape created in the previous demo across the screen.\n\n\t    //Update stage will render next frame\n\t    createjs.Ticker.addEventListener(\"tick\", handleTick);\n\n\t    function handleTick() {\n         //Circle will move 10 units to the right.\n\t    \tcircle.x += 10;\n\t    \t//Will cause the circle to wrap back\n\t    \tif (circle.x > stage.canvas.width) { circle.x = 0; }\n\t    \tstage.update();\n\t    }\n\n<h4>Other Features</h4>\nEaselJS also has built in support for\n<ul><li>Canvas features such as {{#crossLink \"Shadow\"}}{{/crossLink}} and CompositeOperation</li>\n     <li>{{#crossLink \"Ticker\"}}{{/crossLink}}, a global heartbeat that objects can subscribe to</li>\n     <li>Filters, including a provided {{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}, {{#crossLink \"AlphaMaskFilter\"}}{{/crossLink}},\n     {{#crossLink \"AlphaMapFilter\"}}{{/crossLink}}, and {{#crossLink \"BoxBlurFilter\"}}{{/crossLink}}. See {{#crossLink \"Filter\"}}{{/crossLink}}\n     for more information</li>\n     <li>A {{#crossLink \"ButtonHelper\"}}{{/crossLink}} utility, to easily create interactive buttons</li>\n     <li>{{#crossLink \"SpriteSheetUtils\"}}{{/crossLink}} and a {{#crossLink \"SpriteSheetBuilder\"}}{{/crossLink}} to\n     help build and manage {{#crossLink \"SpriteSheet\"}}{{/crossLink}} functionality at run-time.</li>\n</ul>\n\n<h4>Browser Support</h4>\nAll modern browsers that support Canvas will support EaselJS. http://caniuse.com/canvas\nBrowser performance may vary between platforms, for example, Android Canvas has poor hardware support, and is much\nslower on average than most other browsers."
        }
    },
    "classes": {
        "Bitmap": {
            "name": "Bitmap",
            "shortname": "Bitmap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "file": "../src/easeljs/display/Bitmap.js",
            "line": 34,
            "description": "A Bitmap represents an Image, Canvas, or Video in the display list. A Bitmap can be instantiated using an existing\nHTML element, or a string.\n\n<h4>Example</h4>\n     var bitmap = new createjs.Bitmap(\"imagePath.jpg\");\n\nNote: When a string path or image tag that is not yet loaded is used, the stage may need to be redrawn before it\nwill be displayed.",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "imageOrUri",
                    "description": "The source object or URI to an image to display. This can be either an Image, Canvas, or Video object, or a string URI to an image file to load and use. If it is a URI, a new Image object will be constructed and assigned to the .image property.",
                    "type": "Image | HTMLCanvasElement | HTMLVideoElement | String"
                }
            ]
        },
        "BitmapAnimation": {
            "name": "BitmapAnimation",
            "shortname": "BitmapAnimation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 34,
            "description": "Displays frames or sequences of frames (ie. animations) from a sprite sheet image. A sprite sheet is a series of\nimages (usually animation frames) combined into a single image. For example, an animation consisting of 8 100x100\nimages could be combined into a 400x200 sprite sheet (4 frames across by 2 high). You can display individual frames,\nplay frames as an animation, and even sequence animations together.\n\nSee the {{#crossLink \"SpriteSheet\"}}{{/crossLink}} class for more information on setting up frames and animations.\n\n<h4>Example</h4>\n     var instance = new createjs.BitmapAnimation(spriteSheet);\n     instance.gotoAndStop(\"frameName\");\n\nCurrently, you <strong>must</strong> call either {{#crossLink \"BitmapAnimation/gotoAndStop\"}}{{/crossLink}} or\n{{#crossLink \"BitmapAnimation/gotoAndPlay\"}}{{/crossLink}}, or nothing will display on stage.",
            "extends": "DisplayObject",
            "uses": [
                "EventDispatcher"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "spriteSheet",
                    "description": "The SpriteSheet instance to play back. This includes the source image(s), frame\ndimensions, and frame data. See {{#crossLink \"SpriteSheet\"}}{{/crossLink}} for more information.",
                    "type": "SpriteSheet"
                }
            ]
        },
        "Container": {
            "name": "Container",
            "shortname": "Container",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "file": "../src/easeljs/display/Container.js",
            "line": 34,
            "description": "A Container is a nestable display list that allows you to work with compound display elements. For  example you could\ngroup arm, leg, torso and head {{#crossLink \"Bitmap\"}}{{/crossLink}} instances together into a Person Container, and\ntransform them as a group, while still being able to move the individual parts relative to each other. Children of\ncontainers have their <code>transform</code> and <code>alpha</code> properties concatenated with their parent\nContainer.\n\nFor example, a {{#crossLink \"Shape\"}}{{/crossLink}} with x=100 and alpha=0.5, placed in a Container with <code>x=50</code>\nand <code>alpha=0.7</code> will be rendered to the canvas at <code>x=150</code> and <code>alpha=0.35</code>.\nContainers have some overhead, so you generally shouldn't create a Container to hold a single child.\n\n<h4>Example</h4>\n     var container = new createjs.Container();\n     container.addChild(bitmapInstance, shapeInstance);\n     container.x = 100;",
            "extends": "DisplayObject",
            "is_constructor": 1
        },
        "DOMElement": {
            "name": "DOMElement",
            "shortname": "DOMElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 36,
            "description": "<b>This class is still experimental, and more advanced use is likely to be buggy. Please report bugs.</b>\n\nA DOMElement allows you to associate a HTMLElement with the display list. It will be transformed\nwithin the DOM as though it is child of the {{#crossLink \"Container\"}}{{/crossLink}} it is added to. However, it is\nnot rendered to canvas, and as such will retain whatever z-index it has relative to the canvas (ie. it will be\ndrawn in front of or behind the canvas).\n\nThe position of a DOMElement is relative to their parent node in the DOM. It is recommended that\nthe DOM Object be added to a div that also contains the canvas so that they share the same position\non the page.\n\nDOMElement is useful for positioning HTML elements over top of canvas content, and for elements\nthat you want to display outside the bounds of the canvas. For example, a tooltip with rich HTML\ncontent.\n\n<h4>Mouse Interaction</h4>\n\nDOMElement instances are not full EaselJS display objects, and do not participate in EaselJS mouse\nevents or support methods like hitTest. To get mouse events from a DOMElement, you must instead add handlers to\nthe htmlElement (note, this does not support EventDispatcher)\n\n     var domElement = new createjs.DOMElement(htmlElement);\n     domElement.htmlElement.onclick = function() {\n         console.log(\"clicked\");\n     }",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "htmlElement",
                    "description": "A reference or id for the DOM element to manage.",
                    "type": "HTMLElement"
                }
            ]
        },
        "DisplayObject": {
            "name": "DisplayObject",
            "shortname": "DisplayObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 125,
            "description": "DisplayObject is an abstract class that should not be constructed directly. Instead construct subclasses such as\n{{#crossLink \"Container\"}}{{/crossLink}}, {{#crossLink \"Bitmap\"}}{{/crossLink}}, and {{#crossLink \"Shape\"}}{{/crossLink}}.\nDisplayObject is the base class for all display classes in the EaselJS library. It defines the core properties and\nmethods that are shared between all display objects, such as transformation properties (x, y, scaleX, scaleY, etc),\ncaching, and mouse handlers.",
            "uses": [
                "EventDispatcher"
            ],
            "is_constructor": 1
        },
        "Command": {
            "name": "Command",
            "shortname": "Command",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/display/Graphics.js",
            "line": 34,
            "description": "Inner class used by the {{#crossLink \"Graphics\"}}{{/crossLink}} class. Used to create the instruction lists used in Graphics:",
            "access": "protected",
            "tagname": "",
            "is_constructor": 1
        },
        "Graphics": {
            "name": "Graphics",
            "shortname": "Graphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/display/Graphics.js",
            "line": 53,
            "description": "The Graphics class exposes an easy to use API for generating vector drawing instructions and drawing them to a\nspecified context. Note that you can use Graphics without any dependency on the Easel framework by calling {{#crossLink \"DisplayObject/draw\"}}{{/crossLink}}\ndirectly, or it can be used with the {{#crossLink \"Shape\"}}{{/crossLink}} object to draw vector graphics within the\ncontext of an Easel display list.\n\n<h4>Example</h4>\n     var g = new Graphics();\n\t    g.setStrokeStyle(1);\n\t    g.beginStroke(Graphics.getRGB(0,0,0));\n\t    g.beginFill(Graphics.getRGB(255,0,0));\n\t    g.drawCircle(0,0,3);\n\n\t    var s = new Shape(g);\n\t    \ts.x = 100;\n\t    \ts.y = 100;\n\n\t    stage.addChild(s);\n\t    stage.update();\n\nNote that all drawing methods in Graphics return the Graphics instance, so they can be chained together. For example,\nthe following line of code would generate the instructions to draw a rectangle with a red stroke and blue fill, then\nrender it to the specified context2D:\n\n     myGraphics.beginStroke(\"#F00\").beginFill(\"#00F\").drawRect(20, 20, 100, 50).draw(myContext2D);\n\n<h4>Tiny API</h4>\nThe Graphics class also includes a \"tiny API\", which is one or two-letter methods that are shortcuts for all of the\nGraphics methods. These methods are great for creating compact instructions, and is used by the Toolkit for CreateJS\nto generate readable code. All tiny methods are marked as protected, so you can view them by enabling protected\ndescriptions in the docs.\n\n<table>\n    <tr><td><b>Tiny</b></td><td><b>Method</b></td><td><b>Tiny</b></td><td><b>Method</b></td></tr>\n    <tr><td>mt</td><td>{{#crossLink \"Graphics/moveTo\"}}{{/crossLink}} </td>\n    <td>lt</td> <td>{{#crossLink \"Graphics/lineTo\"}}{{/crossLink}}</td></tr>\n    <tr><td>a/at</td><td>{{#crossLink \"Graphics/arc\"}}{{/crossLink}} / {{#crossLink \"Graphics/arcTo\"}}{{/crossLink}} </td>\n    <td>bt</td><td>{{#crossLink \"Graphics/bezierCurveTo\"}}{{/crossLink}} </td></tr>\n    <tr><td>qt</td><td>{{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}} (also curveTo)</td>\n    <td>r</td><td>{{#crossLink \"Graphics/rect\"}}{{/crossLink}} </td></tr>\n    <tr><td>cp</td><td>{{#crossLink \"Graphics/closePath\"}}{{/crossLink}} </td>\n    <td>c</td><td>{{#crossLink \"Graphics/clear\"}}{{/crossLink}} </td></tr>\n    <tr><td>f</td><td>{{#crossLink \"Graphics/beginFill\"}}{{/crossLink}} </td>\n    <td>lf</td><td>{{#crossLink \"Graphics/beginLinearGradientFill\"}}{{/crossLink}} </td></tr>\n    <tr><td>rf</td><td>{{#crossLink \"Graphics/beginRadialGradientFill\"}}{{/crossLink}} </td>\n    <td>bf</td><td>{{#crossLink \"Graphics/beginBitmapFill\"}}{{/crossLink}} </td></tr>\n    <tr><td>ef</td><td>{{#crossLink \"Graphics/endFill\"}}{{/crossLink}} </td>\n    <td>ss</td><td>{{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} </td></tr>\n    <tr><td>s</td><td>{{#crossLink \"Graphics/beginStroke\"}}{{/crossLink}} </td>\n    <td>ls</td><td>{{#crossLink \"Graphics/beginLinearGradientStroke\"}}{{/crossLink}} </td></tr>\n    <tr><td>rs</td><td>{{#crossLink \"Graphics/beginRadialGradientStroke\"}}{{/crossLink}} </td>\n    <td>bs</td><td>{{#crossLink \"Graphics/beginBitmapStroke\"}}{{/crossLink}} </td></tr>\n    <tr><td>es</td><td>{{#crossLink \"Graphics/endStroke\"}}{{/crossLink}} </td>\n    <td>dr</td><td>{{#crossLink \"Graphics/drawRect\"}}{{/crossLink}} </td></tr>\n    <tr><td>rr</td><td>{{#crossLink \"Graphics/drawRoundRect\"}}{{/crossLink}} </td>\n    <td>rc</td><td>{{#crossLink \"Graphics/drawRoundRectComplex\"}}{{/crossLink}} </td></tr>\n    <tr><td>dc</td><td>{{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}} </td>\n    <td>de</td><td>{{#crossLink \"Graphics/drawEllipse\"}}{{/crossLink}} </td></tr>\n    <tr><td>dp</td><td>{{#crossLink \"Graphics/drawPolyStar\"}}{{/crossLink}} </td>\n    <td>p</td><td>{{#crossLink \"Graphics/decodePath\"}}{{/crossLink}} </td></tr>\n</table>\n\nHere is the above example, using the tiny API instead.\n\n     myGraphics.s(\"#F00\").f(\"#00F\").r(20, 20, 100, 50).draw(myContext2D);",
            "is_constructor": 1
        },
        "MovieClip": {
            "name": "MovieClip",
            "shortname": "MovieClip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 34,
            "description": "The MovieClip class associates a TweenJS Timeline with an EaselJS {{#crossLink \"Container\"}}{{/crossLink}}. It allows\nyou to create objects which encapsulate timeline animations, state changes, and synched actions. Due to the\ncomplexities inherent in correctly setting up a MovieClip, it is largely intended for tool output and is not included\nin the main EaselJS library.\n\nCurrently MovieClip only works properly if it is tick based (as opposed to time based) though some concessions have\nbeen made to support time-based timelines in the future.\n\n<h4>Example</h4>\nThis example animates two shapes back and forth. The grey shape starts on the left, but we jump to a mid-point in\nthe animation using {{#crossLink \"MovieClip/gotoAndPlay\"}}{{/crossLink}}.\n\n     var stage = new createjs.Stage(\"canvas\");\n     createjs.Ticker.addEventListener(\"tick\", stage);\n\n     var mc = new createjs.MovieClip(null, 0, true, {start:20});\n     stage.addChild(mc);\n\n     var child1 = new createjs.Shape(\n         new createjs.Graphics().beginFill(\"#999999\")\n             .drawCircle(30,30,30));\n     var child2 = new createjs.Shape(\n         new createjs.Graphics().beginFill(\"#5a9cfb\")\n             .drawCircle(30,30,30));\n\n     mc.timeline.addTween(\n         createjs.Tween.get(child1)\n             .to({x:0}).to({x:60}, 50).to({x:0}, 50));\n     mc.timeline.addTween(\n         createjs.Tween.get(child2)\n             .to({x:60}).to({x:0}, 50).to({x:60}, 50));\n\n     mc.gotoAndPlay(\"start\");\n\nIt is recommended to use <code>tween.to()</code> to animate and set properties (use no duration to have it set\nimmediately), and the <code>tween.wait()</code> method to create delays between animations. Note that using the\n<code>tween.set()</code> method to affect properties will likely not provide the desired result.",
            "mainName": "MovieClip",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mode",
                    "description": "Initial value for the mode property. One of MovieClip.INDEPENDENT,\nMovieClip.SINGLE_FRAME, or MovieClip.SYNCHED. The default is MovieClip.INDEPENDENT.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "independent"
                },
                {
                    "name": "startPosition",
                    "description": "Initial value for the startPosition property.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "loop",
                    "description": "Initial value for the loop property. The default is true.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "labels",
                    "description": "A hash of labels to pass to the timeline instance associated with this MovieClip.\nLabels only need to be passed if they need to be used.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                }
            ]
        },
        "MovieClipPlugin": {
            "name": "MovieClipPlugin",
            "shortname": "MovieClipPlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 488,
            "description": "This plugin works with <a href=\"http://tweenjs.com\" target=\"_blank\">TweenJS</a> to prevent the startPosition\nproperty from tweening.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1
        },
        "Shadow": {
            "name": "Shadow",
            "shortname": "Shadow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/display/Shadow.js",
            "line": 34,
            "description": "This class encapsulates the properties required to define a shadow to apply to a {{#crossLink \"DisplayObject\"}}{{/crossLink}}\nvia it's <code>shadow</code> property.\n\n<h4>Example</h4>\n     myImage.shadow = new createjs.Shadow(\"#000000\", 5, 5, 10);",
            "is_constructor": 1,
            "params": [
                {
                    "name": "color",
                    "description": "The color of the shadow.",
                    "type": "String"
                },
                {
                    "name": "offsetX",
                    "description": "The x offset of the shadow in pixels.",
                    "type": "Number"
                },
                {
                    "name": "offsetY",
                    "description": "The y offset of the shadow in pixels.",
                    "type": "Number"
                },
                {
                    "name": "blur",
                    "description": "The size of the blurring effect.",
                    "type": "Number"
                }
            ]
        },
        "Shape": {
            "name": "Shape",
            "shortname": "Shape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/display/Shape.js",
            "line": 34,
            "description": "A Shape allows you to display vector art in the display list. It composites a {{#crossLink \"Graphics\"}}{{/crossLink}}\ninstance which exposes all of the vector drawing methods. The Graphics instance can be shared between multiple Shape\ninstances to display the same vector graphics with different positions or transforms.\n\nIf the vector art will not\nchange between draws, you may want to use the {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} method to reduce the\nrendering cost.\n\n<h4>Example</h4>\n     var graphics = new createjs.Graphics().beginFill(\"#ff0000\").drawRect(0, 0, 100, 100);\n     var shape = new createjs.Shape(graphics);\n     \n     //Alternatively use can also use the graphics property of the Shape class to renderer the same as above.\n     var shape = new createjs.Shape();\n     shape.graphics.beginFill(\"#ff0000\").drawRect(0, 0, 100, 100);",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "graphics",
                    "description": "Optional. The graphics instance to display. If null, a new Graphics instance will be created.",
                    "type": "Graphics"
                }
            ]
        },
        "SpriteSheet": {
            "name": "SpriteSheet",
            "shortname": "SpriteSheet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 33,
            "description": "Encapsulates the properties and methods associated with a sprite sheet. A sprite sheet is a series of images (usually\nanimation frames) combined into a larger image (or images). For example, an animation consisting of eight 100x100\nimages could be combined into a single 400x200 sprite sheet (4 frames across by 2 high).\n\nThe data passed to the SpriteSheet constructor defines three critical pieces of information:<ol>\n   <li> The image or images to use.</li>\n   <li> The positions of individual image frames. This data can be represented in one of two ways:\n   As a regular grid of sequential, equal-sized frames, or as individually defined, variable sized frames arranged in\n   an irregular (non-sequential) fashion.</li>\n   <li> Likewise, animations can be represented in two ways: As a series of sequential frames, defined by a start and\n   end frame [0,3], or as a list of frames [0,1,2,3].</li>\n</OL>\n\n<h4>SpriteSheet Format</h4>\n\n     data = {\n\n         // DEFINING IMAGES:\n         // list of images or image URIs to use. SpriteSheet can handle preloading.\n         // the order dictates their index value for frame definition.\n         images: [image1, \"path/to/image2.png\"],\n\n         // DEFINING FRAMES:\n\t        // the simple way to define frames, only requires frame size because frames are consecutive:\n\t        // define frame width/height, and optionally the frame count and registration point x/y.\n\t        // if count is omitted, it will be calculated automatically based on image dimensions.\n\t        frames: {width:64, height:64, count:20, regX: 32, regY:64},\n\n\t        // OR, the complex way that defines individual rects for frames.\n\t        // The 5th value is the image index per the list defined in \"images\" (defaults to 0).\n\t        frames: [\n\t        \t// x, y, width, height, imageIndex, regX, regY\n\t        \t[0,0,64,64,0,32,64],\n\t        \t[64,0,96,64,0]\n\t        ],\n\n         // DEFINING ANIMATIONS:\n\n\t        // simple animation definitions. Define a consecutive range of frames.\n\t        // also optionally define a \"next\" animation name for sequencing.\n\t        // setting next to false makes it pause when it reaches the end.\n\t        animations: {\n\t        \t// start, end, next, frequency\n\t        \trun: [0,8],\n\t        \tjump: [9,12,\"run\",2],\n\t        \tstand: 13\n\t        }\n\n         // the complex approach which specifies every frame in the animation by index.\n         animations: {\n         \trun: {\n         \t\tframes: [1,2,3,3,2,1]\n         \t},\n         \tjump: {\n         \t\tframes: [1,4,5,6,1],\n         \t\tnext: \"run\",\n         \t\tfrequency: 2\n         \t},\n         \tstand: { frames: [7] }\n         }\n\n\t        // the above two approaches can be combined, you can also use a single frame definition:\n\t        animations: {\n\t        \trun: [0,8,true,2],\n\t        \tjump: {\n\t        \t\tframes: [8,9,10,9,8],\n\t        \t\tnext: \"run\",\n\t        \t\tfrequency: 2\n\t        \t},\n\t        \tstand: 7\n\t        }\n     }\n\n<h4>Example</h4>\nTo define a simple sprite sheet, with a single image \"sprites.jpg\" arranged in a regular 50x50 grid with two\nanimations, \"run\" looping from frame 0-4 inclusive, and \"jump\" playing from frame 5-8 and sequencing back to run:\n\n     var data = {\n         images: [\"sprites.jpg\"],\n         frames: {width:50, height:50},\n         animations: {run:[0,4], jump:[5,8,\"run\"]}\n     };\n     var spriteSheet = new createjs.SpriteSheet(data);\n     var animation = new createjs.BitmapAnimation(spriteSheet);\n     animation.gotoAndPlay(\"run\");",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "uses": [
                "EventDispatcher"
            ]
        },
        "Stage": {
            "name": "Stage",
            "shortname": "Stage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/display/Stage.js",
            "line": 34,
            "description": "A stage is the root level {{#crossLink \"Container\"}}{{/crossLink}} for a display list. Each time its {{#crossLink \"Stage/tick\"}}{{/crossLink}}\nmethod is called, it will render its display list to its target canvas.\n\n<h4>Example</h4>\nThis example creates a stage, adds a child to it, then uses {{#crossLink \"Ticker\"}}{{/crossLink}} to update the child\nand redraw the stage using {{#crossLink \"Stage/update\"}}{{/crossLink}}.\n\n     var stage = new createjs.Stage(\"canvasElementId\");\n     var image = new createjs.Bitmap(\"imagePath.png\");\n     stage.addChild(image);\n     createjs.Ticker.addEventListener(\"tick\", handleTick);\n     function handleTick(event) {\n         image.x += 10;\n         stage.update();\n     }",
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvas",
                    "description": "A canvas object that the Stage will render to, or the string id\nof a canvas object in the current document.",
                    "type": "HTMLCanvasElement | String | Object"
                }
            ]
        },
        "Text": {
            "name": "Text",
            "shortname": "Text",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/display/Text.js",
            "line": 34,
            "description": "Display one or more lines of dynamic text (not user editable) in the display list. Line wrapping support (using the\nlineWidth) is very basic, wrapping on spaces and tabs only. Note that as an alternative to Text, you can position HTML\ntext above or below the canvas relative to items in the display list using the {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}}\nmethod, or using {{#crossLink \"DOMElement\"}}{{/crossLink}}.\n\n<b>Please note that Text does not support HTML text, and can only display one font style at a time.</b> To use\nmultiple font styles, you will need to create multiple text instances, and position them manually.\n\n<h4>Example</h4>\n     var text = new createjs.Text(\"Hello World\", \"20px Arial\", \"#ff7700\");\n     text.x = 100;\n     text.textBaseline = \"alphabetic\";\n\nCreateJS Text supports web fonts (the same rules as Canvas). The font must be loaded and supported by the browser\nbefore it can be displayed.\n\n<strong>Note:</strong> Text can be expensive to generate, so cache instances where possible. Be aware that not all\nbrowsers will render Text exactly the same. *",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "The text to display.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "font",
                    "description": "The font style to use. Any valid value for the CSS font attribute is acceptable (ex. \"bold\n36px Arial\").",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "color",
                    "description": "The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex.\n\"#F00\", \"red\", or \"#FF0000\").",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "EventDispatcher": {
            "name": "EventDispatcher",
            "shortname": "EventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "BitmapAnimation",
                "DisplayObject",
                "SpriteSheet",
                "MouseEvent",
                "SpriteSheetBuilder",
                "Ticker"
            ],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/events/EventDispatcher.js",
            "line": 34,
            "description": "The EventDispatcher provides methods for managing prioritized queues of event listeners and dispatching events. All\n{{#crossLink \"DisplayObject\"}}{{/crossLink}} classes dispatch events, as well as some of the utilities like {{#crossLink \"Ticker\"}}{{/crossLink}}.\n\nYou can either extend this class or mix its methods into an existing prototype or instance by using the\nEventDispatcher {{#crossLink \"EventDispatcher/initialize\"}}{{/crossLink}} method.\n\n<h4>Example</h4>\nAdd EventDispatcher capabilities to the \"MyClass\" class.\n\n     EventDispatcher.initialize(MyClass.prototype);\n\nAdd an event (see {{#crossLink \"EventDispatcher/addEventListener\"}}{{/crossLink}}).\n\n     instance.addEventListener(\"eventName\", handlerMethod);\n     function handlerMethod(event) {\n         console.log(event.target + \" Was Clicked\");\n     }\n\n<b>Maintaining proper scope</b><br />\nWhen using EventDispatcher in a class, you may need to use <code>Function.bind</code> or another approach to\nmaintain you method scope. Note that Function.bind is not supported in some older browsers.\n\n     instance.addEventListener(\"click\", handleClick.bind(this));\n     function handleClick(event) {\n         console.log(\"Method called in scope: \" + this);\n     }\n\nPlease note that currently, EventDispatcher does not support event priority or bubbling. Future versions may add\nsupport for one or both of these features.",
            "is_constructor": 1
        },
        "MouseEvent": {
            "name": "MouseEvent",
            "shortname": "MouseEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/events/MouseEvent.js",
            "line": 34,
            "description": "This is passed as the parameter to mousedown, mouseup, mousemove, stagemouseup, stagemousedown, mouseover, mouseout\nand click events on {{#crossLink \"DisplayObject\"}}{{/crossLink}} instances.",
            "uses": [
                "EventDispatcher"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "stageX",
                    "description": "The normalized x position relative to the stage.",
                    "type": "Number"
                },
                {
                    "name": "stageY",
                    "description": "The normalized y position relative to the stage.",
                    "type": "Number"
                },
                {
                    "name": "target",
                    "description": "The display object this event relates to. Note that this will be overwritten when the event is dispatched via EventDispatcher.",
                    "type": "DisplayObject"
                },
                {
                    "name": "nativeEvent",
                    "description": "The native DOM event related to this mouse event.",
                    "type": "MouseEvent"
                },
                {
                    "name": "pointerID",
                    "description": "The unique id for the pointer.",
                    "type": "Number"
                },
                {
                    "name": "primary",
                    "description": "Indicates whether this is the primary pointer in a multitouch environment.",
                    "type": "Boolean"
                },
                {
                    "name": "rawX",
                    "description": "The raw x position relative to the stage.",
                    "type": "Number"
                },
                {
                    "name": "rawY",
                    "description": "The raw y position relative to the stage.",
                    "type": "Number"
                }
            ]
        },
        "AlphaMapFilter": {
            "name": "AlphaMapFilter",
            "shortname": "AlphaMapFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/filters/AlphaMapFilter.js",
            "line": 34,
            "description": "Applies a greyscale alpha map image (or canvas) to the target, such that the alpha channel of the result will\nbe copied from the red channel of the map, and the RGB channels will be copied from the target.\n\nGenerally, it is recommended that you use {{#crossLink \"AlphaMaskFilter\"}}{{/crossLink}}, because it has much\nbetter performance.\n\n<h4>Example</h4>\nThis example draws a red->blue box, caches it, and then uses the cache canvas as an alpha map on a 100x100 image.\n\n      var box = new createjs.Shape();\n      box.graphics.beginLinearGradientFill([\"#ff0000\", \"#0000ff\"], [0, 1], 0, 0, 0, 100)\n      box.graphics.drawRect(0, 0, 100, 100);\n      box.cache(0, 0, 100, 100);\n\n      var bmp = new createjs.Bitmap(\"path/to/image.jpg\");\n      bmp.filters = [\n          new createjs.AlphaMapFilter(box.cacheCanvas)\n      ];\n      bmp.cache(0, 0, 100, 100);\n      stage.addChild(bmp);\n\nSee {{#crossLink \"Filter\"}}{{/crossLink}} for more information on applying filters.",
            "extends": "Filter",
            "is_constructor": 1,
            "params": [
                {
                    "name": "alphaMap",
                    "description": "The greyscale image (or canvas) to use as the alpha value for the\nresult. This should be exactly the same dimensions as the target.",
                    "type": "Image|HTMLCanvasElement"
                }
            ]
        },
        "AlphaMaskFilter": {
            "name": "AlphaMaskFilter",
            "shortname": "AlphaMaskFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/filters/AlphaMaskFilter.js",
            "line": 34,
            "description": "Applies the alpha from the mask image (or canvas) to the target, such that the alpha channel of the result will\nbe derived from the mask, and the RGB channels will be copied from the target. This can be used, for example, to\napply an alpha mask to a display object. This can also be used to combine a JPG compressed RGB image with a PNG32\nalpha mask, which can result in a much smaller file size than a single PNG32 containing ARGB.\n\n<b>IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters correctly.</b>\n\n<h4>Example</h4>\nThis example draws a gradient box, then caches it and uses the \"cacheCanvas\" as the alpha mask on a 100x100 image.\n\n     var box = new createjs.Shape();\n     box.graphics.beginLinearGradientFill([\"#000000\", \"rgba(0, 0, 0, 0)\"], [0, 1], 0, 0, 100, 100)\n     box.graphics.drawRect(0, 0, 100, 100);\n     box.cache(0, 0, 100, 100);\n\n     var bmp = new createjs.Bitmap(\"path/to/image.jpg\");\n     bmp.filters = [\n         new createjs.AlphaMaskFilter(box.cacheCanvas)\n     ];\n     bmp.cache(0, 0, 100, 100);\n\nSee {{#crossLink \"Filter\"}}{{/crossLink}} for more information on applying filters.",
            "extends": "Filter",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mask",
                    "description": "",
                    "type": "Image"
                }
            ]
        },
        "BoxBlurFilter": {
            "name": "BoxBlurFilter",
            "shortname": "BoxBlurFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/filters/BoxBlurFilter.js",
            "line": 34,
            "description": "Applies a box blur to DisplayObjects. Note that this filter is fairly CPU intensive, particularly if the quality is\nset higher than 1.\n\n<h4>Example</h4>\nThis example creates a red circle, and then applies a 5 pixel blur to it. It uses the {{#crossLink \"Filter/getBounds\"}}{{/crossLink}}\nmethod to account for the spread that the blur causes.\n\n     var shape = new createjs.Shape().set({x:100,y:100});\n     shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n\n     var blurFilter = new createjs.BoxBlurFilter(5, 5, 1);\n     shape.filters = [blurFilter];\n     var bounds = blurFilter.getBounds();\n\n     shape.cache(-50+bounds.x, -50+bounds.y, 100+bounds.width, 100+bounds.height);\n\nSee {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.",
            "extends": "Filter",
            "is_constructor": 1,
            "params": [
                {
                    "name": "blurX",
                    "description": "The horizontal blur radius in pixels.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "blurY",
                    "description": "The vertical blur radius in pixels.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "quality",
                    "description": "The number of blur iterations.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ]
        },
        "ColorFilter": {
            "name": "ColorFilter",
            "shortname": "ColorFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/filters/ColorFilter.js",
            "line": 34,
            "description": "Applies a color transform to DisplayObjects.\n\n<h4>Example</h4>\nThis example draws a red circle, and then transforms it to Blue. This is accomplished by multiplying all the channels\nto 0 (except alpha, which is set to 1), and then adding 255 to the blue channel.\n\n     var shape = new createjs.Shape().set({x:100,y:100});\n     shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n\n     shape.filters = [\n         new createjs.ColorFilter(0,0,0,1, 0,0,255,0)\n     ];\n     shape.cache(-50, -50, 100, 100);\n\nSee {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.",
            "is_constructor": 1,
            "extends": "Filter",
            "params": [
                {
                    "name": "redMultiplier",
                    "description": "The amount to multiply against the red channel. This is a range between 0 and 1.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "greenMultiplier",
                    "description": "The amount to multiply against the green channel. This is a range between 0 and 1.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "blueMultiplier",
                    "description": "The amount to multiply against the blue channel. This is a range between 0 and 1.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "alphaMultiplier",
                    "description": "The amount to multiply against the alpha channel. This is a range between 0 and 1.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "redOffset",
                    "description": "The amount to add to the red channel after it has been multiplied. This is a range\nbetween -255 and 255.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "greenOffset",
                    "description": "The amount to add to the green channel after it has been multiplied. This is a range\nbetween -255 and 255.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "blueOffset",
                    "description": "The amount to add to the blue channel after it has been multiplied. This is a range\nbetween -255 and 255.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "alphaOffset",
                    "description": "The amount to add to the alpha channel after it has been multiplied. This is a range\nbetween -255 and 255.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ]
        },
        "ColorMatrix": {
            "name": "ColorMatrix",
            "shortname": "ColorMatrix",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/filters/ColorMatrix.js",
            "line": 34,
            "description": "Provides helper functions for assembling a matrix for use with the {{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}},\nor can be used directly as the matrix for a ColorMatrixFilter. Most methods return the instance to facilitate\nchained calls.\n\n<h4>Example</h4>\n     myColorMatrix.adjustHue(20).adjustBrightness(50);\n\nSee {{#crossLink \"Filter\"}}{{/crossLink}} for an example of how to apply filters, or {{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}\nfor an example of how to use ColorMatrix to change a DisplayObject's color.",
            "is_constructor": 1,
            "extends": "Array",
            "params": [
                {
                    "name": "brightness",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "contrast",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "saturation",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "hue",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "ColorMatrixFilter": {
            "name": "ColorMatrixFilter",
            "shortname": "ColorMatrixFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/filters/ColorMatrixFilter.js",
            "line": 34,
            "description": "Allows you to carry out complex color operations such as modifying saturation, brightness, or inverting. See the\n{{#crossLink \"ColorMatrix\"}}{{/crossLink}} for more information on changing colors. For an easier color transform,\nconsider the {{#crossLink \"ColorTransform\"}}{{/crossLink}} filter.\n\n<h4>Example</h4>\nThis example creates a red circle, inverts its hue, and then saturates it to brighten it up.\n\n     var shape = new createjs.Shape().set({x:100,y:100});\n     shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n\n     var matrix = new createjs.ColorMatrix().adjustHue(180).adjustSaturation(100);\n     shape.filters = [\n         new createjs.ColorMatrixFilter(matrix)\n     ];\n\n     shape.cache(-50, -50, 100, 100);\n\nSee {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.",
            "is_constructor": 1,
            "extends": "Filter",
            "params": [
                {
                    "name": "matrix",
                    "description": "A 4x5 matrix describing the color operation to perform. See also the {{#crossLink \"ColorMatrix\"}}{{/crossLink}}\nclass.",
                    "type": "Array"
                }
            ]
        },
        "Filter": {
            "name": "Filter",
            "shortname": "Filter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/filters/Filter.js",
            "line": 34,
            "description": "Base class that all filters should inherit from. Filters need to be applied to objects that have been cached using\nthe {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} method. If an object changes, please cache it again, or use\n{{#crossLink \"DisplayObject/updateCache\"}}{{/crossLink}}. Note that the filters must be applied before caching.\n\n<h4>Example</h4>\n     myInstance.filters = [\n         new createjs.ColorFilter(0, 0, 0, 1, 255, 0, 0),\n         new createjs.BoxBlurFilter(5, 5, 10)\n     ];\n     myInstance.cache(0,0, 100, 100);\n\nNote that each filter can implement a {{#crossLink \"Filter/getBounds\"}}{{/crossLink}} method, which returns the\nmargins that need to be applied in order to fully display the filter. For example, the {{#crossLink \"BoxBlurFilter\"}}{{/crossLink}}\nwill cause an object to feather outwards, resulting in a margin around the shape.\n\n<h4>EaselJS Filters</h4>\nEaselJS comes with a number of pre-built filters. Note that individual filters are not compiled into the minified\nversion of EaselJS. To use them, you must include them manually in the HTML.\n<ul><li>{{#crossLink \"AlphaMapFilter\"}}{{/crossLink}} : Map a greyscale image to the alpha channel of a display object</li>\n     <li>{{#crossLink \"AlphaMaskFilter\"}}{{/crossLink}}: Map an image's alpha channel to the alpha channel of a display object</li>\n     <li>{{#crossLink \"BoxBlurFilter\"}}{{/crossLink}}: Apply vertical and horizontal blur to a display object</li>\n     <li>{{#crossLink \"ColorFilter\"}}{{/crossLink}}: Color transform a display object</li>\n     <li>{{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}: Transform an image using a {{#crossLink \"ColorMatrix\"}}{{/crossLink}}</li>\n</ul>",
            "is_constructor": 1
        },
        "Matrix2D": {
            "name": "Matrix2D",
            "shortname": "Matrix2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 34,
            "description": "Represents an affine transformation matrix, and provides tools for constructing and concatenating matrixes.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "a",
                    "description": "Specifies the a property for the new matrix.",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "Specifies the b property for the new matrix.",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "Specifies the c property for the new matrix.",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "Specifies the d property for the new matrix.",
                    "type": "Number"
                },
                {
                    "name": "tx",
                    "description": "Specifies the tx property for the new matrix.",
                    "type": "Number"
                },
                {
                    "name": "ty",
                    "description": "Specifies the ty property for the new matrix.",
                    "type": "Number"
                }
            ]
        },
        "Point": {
            "name": "Point",
            "shortname": "Point",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/geom/Point.js",
            "line": 34,
            "description": "Represents a point on a 2 dimensional x / y coordinate system.\n\n<h4>Example</h4>\n     var point = new Point(0, 100);",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "X position.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "Y position.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ]
        },
        "Rectangle": {
            "name": "Rectangle",
            "shortname": "Rectangle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/geom/Rectangle.js",
            "line": 34,
            "description": "Represents a rectangle as defined by the points (x, y) and (x+width, y+height).",
            "example": [
                "\n     var rect = new createjs.Rectangle(0, 0, 100, 100);"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "X position.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "Y position.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "width",
                    "description": "The width of the Rectangle.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "height",
                    "description": "The height of the Rectangle.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ]
        },
        "ButtonHelper": {
            "name": "ButtonHelper",
            "shortname": "ButtonHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/ui/ButtonHelper.js",
            "line": 34,
            "description": "The ButtonHelper is a helper class to create interactive buttons from {{#crossLink \"MovieClip\"}}{{/crossLink}} or\n{{#crossLink \"BitmapAnimation\"}}{{/crossLink}} instances. This class will intercept mouse events from an object, and\nautomatically call {{#crossLink \"BitmapAnimation/gotoAndStop\"}}{{/crossLink}} or {{#crossLink \"BitmapAnimation/gotoAndPlay\"}}{{/crossLink}},\nto the respective animation labels, add a pointer cursor, and allows the user to define a hit state frame.\n\nThe ButtonHelper instance does not need to be added to the stage, but a reference should be maintained to prevent\ngarbage collection.\n\n<h4>Example</h4>\n\n     var helper = new createjs.ButtonHelper(myInstance, \"out\", \"over\", \"down\", false, myInstance, \"hit\");\n     myInstance.addEventListener(\"click\", handleClick);\n     function handleClick(event) {\n         // Click Happened.\n     }",
            "params": [
                {
                    "name": "target",
                    "description": "The instance to manage.",
                    "type": "BitmapAnimation|MovieClip"
                },
                {
                    "name": "outLabel",
                    "description": "The label or animation to go to when the user rolls out of the button.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"out\""
                },
                {
                    "name": "overLabel",
                    "description": "The label or animation to go to when the user rolls over the button.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"over\""
                },
                {
                    "name": "downLabel",
                    "description": "The label or animation to go to when the user presses the button.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"down\""
                },
                {
                    "name": "play",
                    "description": "If the helper should call \"gotoAndPlay\" or \"gotoAndStop\" on the button when changing\nstates.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "hitArea",
                    "description": "An optional item to use as the hit state for the button. If this is not defined,\nthen the button's visible states will be used instead. Note that the same instance as the \"target\" argument can be\nused for the hitState.",
                    "type": "DisplayObject",
                    "optional": true
                },
                {
                    "name": "hitLabel",
                    "description": "The label or animation on the hitArea instance that defines the hitArea bounds. If this is\nnull, then the default state of the hitArea will be used.",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "Touch": {
            "name": "Touch",
            "shortname": "Touch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/ui/Touch.js",
            "line": 36,
            "description": "Global utility for working with multi-touch enabled devices in EaselJS. Currently supports W3C Touch API (iOS and\nmodern Android browser) and IE10.\n\nEnsure that you {{#crossLink \"Touch/disable\"}}{{/crossLink}} touch when cleaning up your application.\nNote that you do not have to check if touch is supported to enable it, as it will fail gracefully if it is not\nsupported.\n\n<h4>Example</h4>\n\n     var stage = new createjs.Stage(\"canvasId\");\n     createjs.Touch.enable(stage);\n\n<strong>Note:</strong> It is important to disable Touch on a stage that you are no longer using:\n\n     createjs.Touch.disable(stage);",
            "static": 1
        },
        "Log": {
            "name": "Log",
            "shortname": "Log",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/utils/Log.js",
            "line": 34,
            "description": "Log provides a centralized system for outputting errors. By default it will attempt to use console.log\nto output messages, but this can be changed by setting the out property.",
            "is_constructor": 1
        },
        "SpriteSheetBuilder": {
            "name": "SpriteSheetBuilder",
            "shortname": "SpriteSheetBuilder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 34,
            "description": "The SpriteSheetBuilder allows you to generate sprite sheets at run time from any display object. This can allow\nyou to maintain your assets as vector graphics (for low file size), and render them at run time as sprite sheets\nfor better performance.\n\nSprite sheets can be built either synchronously, or asynchronously, so that large sprite sheets can be generated\nwithout locking the UI.\n\nNote that the \"images\" used in the generated sprite sheet are actually canvas elements, and that they will be sized\nto the nearest power of 2 up to the value of <code>maxWidth</code> or <code>maxHeight</code>.",
            "uses": [
                "EventDispatcher"
            ],
            "is_constructor": 1
        },
        "SpriteSheetUtils": {
            "name": "SpriteSheetUtils",
            "shortname": "SpriteSheetUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/utils/SpriteSheetUtils.js",
            "line": 34,
            "description": "The SpriteSheetUtils class is a collection of static methods for working with {{#crossLink \"SpriteSheet\"}}{{/crossLink}}s.\nA sprite sheet is a series of images (usually animation frames) combined into a single image on a regular grid. For\nexample, an animation consisting of 8 100x100 images could be combined into a 400x200 sprite sheet (4 frames across\nby 2 high). The SpriteSheetUtils class uses a static interface and should not be instantiated.",
            "static": 1
        },
        "Ticker": {
            "name": "Ticker",
            "shortname": "Ticker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 35,
            "description": "The Ticker provides  a centralized tick or heartbeat broadcast at a set interval. Listeners can subscribe to the tick\nevent to be notified when a set time interval has elapsed.\n\nNote that the interval that the tick event is called is a target interval, and may be broadcast at a slower interval\nduring times of high CPU load. The Ticker class uses a static interface (ex. <code>Ticker.getPaused()</code>) and\nshould not be instantiated.\n\n<h4>Example</h4>\n     createjs.Ticker.addEventListener(\"tick\", handleTick);\n     function handleTick(event) {\n         // Actions carried out each frame\n         if (!event.paused) {\n             // Actions carried out when the Ticker is not paused.\n         }\n     }\n\nTo update a stage every tick, the {{#crossLink \"Stage\"}}{{/crossLink}} instance can also be used as a listener, as\nit will automatically update when it receives a tick event:\n\n     createjs.Ticker.addEventListener(\"tick\", stage);",
            "uses": [
                "EventDispatcher"
            ],
            "static": 1
        },
        "UID": {
            "name": "UID",
            "shortname": "UID",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/utils/UID.js",
            "line": 33,
            "description": "Global utility for generating sequential unique ID numbers. The UID class uses a static interface (ex. <code>UID.get()</code>)\nand should not be instantiated.",
            "static": 1
        },
        "EaselJS": {
            "name": "EaselJS",
            "shortname": "EaselJS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "../src/easeljs/version.js",
            "line": 3,
            "description": "Static class holding library specific information such as the version and buildDate of\nthe library."
        }
    },
    "classitems": [
        {
            "file": "../src/easeljs/display/Bitmap.js",
            "line": 55,
            "description": "The image to render. This can be an Image, a Canvas, or a Video.",
            "itemtype": "property",
            "name": "image",
            "type": "Image | HTMLCanvasElement | HTMLVideoElement",
            "class": "Bitmap"
        },
        {
            "file": "../src/easeljs/display/Bitmap.js",
            "line": 62,
            "description": "Whether or not the Bitmap should be draw to the canvas at whole pixel coordinates.",
            "itemtype": "property",
            "name": "snapToPixel",
            "type": "Boolean",
            "default": "true",
            "class": "Bitmap"
        },
        {
            "file": "../src/easeljs/display/Bitmap.js",
            "line": 70,
            "description": "Specifies an area of the source image to draw. If omitted, the whole image will be drawn.",
            "itemtype": "property",
            "name": "sourceRect",
            "type": "Rectangle",
            "default": "null",
            "class": "Bitmap"
        },
        {
            "file": "../src/easeljs/display/Bitmap.js",
            "line": 80,
            "itemtype": "property",
            "name": "DisplayObject_initialize",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "Bitmap"
        },
        {
            "file": "../src/easeljs/display/Bitmap.js",
            "line": 87,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "Bitmap"
        },
        {
            "file": "../src/easeljs/display/Bitmap.js",
            "line": 104,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\n\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "Bitmap"
        },
        {
            "file": "../src/easeljs/display/Bitmap.js",
            "line": 117,
            "itemtype": "property",
            "name": "DisplayObject_draw",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "Bitmap"
        },
        {
            "file": "../src/easeljs/display/Bitmap.js",
            "line": 124,
            "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\n\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache.\nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean"
                }
            ],
            "class": "Bitmap"
        },
        {
            "file": "../src/easeljs/display/Bitmap.js",
            "line": 149,
            "description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should <b>not</b> cache Bitmap instances as it can degrade performance.\n\n<strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\nTo see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\nmethod.",
            "itemtype": "method",
            "name": "cache",
            "class": "Bitmap"
        },
        {
            "file": "../src/easeljs/display/Bitmap.js",
            "line": 159,
            "description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should <b>not</b> cache Bitmap instances as it can degrade performance.\n\n<strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\nTo see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\nmethod.",
            "itemtype": "method",
            "name": "updateCache",
            "class": "Bitmap"
        },
        {
            "file": "../src/easeljs/display/Bitmap.js",
            "line": 169,
            "description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should <b>not</b> cache Bitmap instances as it can degrade performance.\n\n<strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\nTo see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\nmethod.",
            "itemtype": "method",
            "name": "uncache",
            "class": "Bitmap"
        },
        {
            "file": "../src/easeljs/display/Bitmap.js",
            "line": 179,
            "description": "Returns a clone of the Bitmap instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Bitmap instance.",
                "type": "Bitmap"
            },
            "class": "Bitmap"
        },
        {
            "file": "../src/easeljs/display/Bitmap.js",
            "line": 191,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Bitmap"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 63,
            "description": "Dispatched when an animation reaches its ends.",
            "itemtype": "event",
            "name": "animationend",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "The name of the animation that just ended.",
                    "type": "String"
                },
                {
                    "name": "next",
                    "description": "The name of the next animation that will be played, or null. This will be the same as name if the animation is looping.",
                    "type": "String"
                }
            ],
            "since": "0.6.0",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 75,
            "description": "Specifies a function to call whenever any animation reaches its end. It will be called with three\nparams: the first will be a reference to this instance, the second will be the name of the animation\nthat just ended, and the third will be the name of the next animation that will be played.",
            "itemtype": "property",
            "name": "onAnimationEnd",
            "type": "{Function}",
            "deprecated": true,
            "deprecationMessage": "In favour of the \"animationend\" event. Will be removed in a future version.",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 85,
            "description": "The frame that will be drawn when draw is called. Note that with some SpriteSheet data, this\nwill advance non-sequentially. READ-ONLY.",
            "itemtype": "property",
            "name": "currentFrame",
            "type": "{Number}",
            "default": "-1",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 94,
            "description": "Returns the currently playing animation. READ-ONLY.",
            "itemtype": "property",
            "name": "currentAnimation",
            "type": "{String}",
            "final": 1,
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 102,
            "description": "Prevents the animation from advancing each tick automatically. For example, you could create a sprite\nsheet of icons, set paused to true, and display the appropriate icon by setting <code>currentFrame</code>.",
            "itemtype": "property",
            "name": "paused",
            "type": "{Boolean}",
            "default": "false",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 111,
            "description": "The SpriteSheet instance to play back. This includes the source image, frame dimensions, and frame\ndata. See {{#crossLink \"SpriteSheet\"}}{{/crossLink}} for more information.",
            "itemtype": "property",
            "name": "spriteSheet",
            "type": "{SpriteSheet}",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 119,
            "description": "Whether or not the image should be draw to the canvas at whole pixel coordinates.",
            "itemtype": "property",
            "name": "snapToPixel",
            "type": "{Boolean}",
            "default": "true",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 127,
            "description": "When used in conjunction with animations having an frequency greater than 1, this lets you offset which tick the\nplayhead will advance on. For example, you could create two BitmapAnimations, both playing an animation with a\nfrequency of 2, but one having offset set to 1. Both instances would advance every second tick, but they would\nadvance on alternating ticks (effectively, one instance would advance on odd ticks, the other on even ticks).",
            "itemtype": "property",
            "name": "offset",
            "type": "{Number}",
            "default": "0",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 139,
            "description": "Specifies the current frame index within the current playing animation. When playing normally, this will increase\nsuccessively from 0 to n-1, where n is the number of frames in the current animation.",
            "itemtype": "property",
            "name": "currentAnimationFrame",
            "type": "{Number}",
            "default": "0",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 159,
            "itemtype": "property",
            "name": "_advanceCount",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "0",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 167,
            "itemtype": "property",
            "name": "_animation",
            "access": "protected",
            "tagname": "",
            "type": "{Object}",
            "default": "null",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 176,
            "itemtype": "property",
            "name": "DisplayObject_initialize",
            "type": "{Function}",
            "access": "private",
            "tagname": "",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 183,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 193,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 205,
            "itemtype": "property",
            "name": "DisplayObject_draw",
            "type": "{Function}",
            "access": "private",
            "tagname": "",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 212,
            "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache.\nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean"
                }
            ],
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 235,
            "description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should not cache Bitmap instances as it can degrade performance.",
            "itemtype": "method",
            "name": "cache",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 241,
            "description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should not cache Bitmap instances as it can degrade performance.",
            "itemtype": "method",
            "name": "updateCache",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 247,
            "description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should not cache Bitmap instances as it can degrade performance.",
            "itemtype": "method",
            "name": "uncache",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 253,
            "description": "Begin playing a paused animation. The BitmapAnimation will be paused if either {{#crossLink \"BitmapAnimation/stop\"}}{{/crossLink}}\nor {{#crossLink \"BitmapAnimation/gotoAndStop\"}}{{/crossLink}} is called. Single frame animations will remain\nunchanged.",
            "itemtype": "method",
            "name": "play",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 263,
            "description": "Stop playing a running animation. The BitmapAnimation will be playing if {{#crossLink \"BitmapAnimation/gotoAndPlay\"}}{{/crossLink}}\nis called. Note that calling {{#crossLink \"BitmapAnimation/gotoAndPlay\"}}{{/crossLink}} or {{#crossLink \"BitmapAnimation/play\"}}{{/crossLink}}\nwill resume playback.",
            "itemtype": "method",
            "name": "stop",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 273,
            "description": "Sets paused to false and plays the specified animation name, named frame, or frame number.",
            "itemtype": "method",
            "name": "gotoAndPlay",
            "params": [
                {
                    "name": "frameOrAnimation",
                    "description": "The frame number or animation name that the playhead should move to\nand begin playing.",
                    "type": "String|Number"
                }
            ],
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 284,
            "description": "Sets paused to true and seeks to the specified animation name, named frame, or frame number.",
            "itemtype": "method",
            "name": "gotoAndStop",
            "params": [
                {
                    "name": "frameOrAnimation",
                    "description": "The frame number or animation name that the playhead should move to\nand stop.",
                    "type": "String|Number"
                }
            ],
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 295,
            "description": "Advances the playhead. This occurs automatically each tick by default.",
            "itemtype": "method",
            "name": "advance",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 305,
            "description": "Returns a {{#crossLink \"Rectangle\"}}{{/crossLink}} instance defining the bounds of the current frame relative to\nthe origin. For example, a 90 x 70 frame with <code>regX=50</code> and <code>regY=40</code> would return a\nrectangle with [x=-50, y=-40, width=90, height=70].\n\nAlso see the SpriteSheet {{#crossLink \"SpriteSheet/getFrameBounds\"}}{{/crossLink}} method.",
            "itemtype": "method",
            "name": "getBounds",
            "return": {
                "description": "A Rectangle instance. Returns null if the frame does not exist, or the image is not fully\nloaded.",
                "type": "Rectangle"
            },
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 319,
            "description": "Returns a clone of the BitmapAnimation instance. Note that the same SpriteSheet is shared between cloned\ninstances.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the BitmapAnimation instance.",
                "type": "BitmapAnimation"
            },
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 331,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 341,
            "itemtype": "property",
            "name": "DisplayObject__tick",
            "type": "{Function}",
            "access": "private",
            "tagname": "",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 348,
            "description": "Advances the <code>currentFrame</code> if paused is not true. This is called automatically when the {{#crossLink \"Stage\"}}{{/crossLink}}\nticks.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_tick",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 363,
            "description": "Normalizes the current frame, advancing animations and dispatching callbacks as appropriate.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_normalizeCurrentFrame",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 398,
            "description": "Dispatches the \"animationend\" event. Returns true if a handler changed the animation (ex. calling {{#crossLink \"BitmapAnimation/stop\"}}{{/crossLink}},\n{{#crossLink \"BitmapAnimation/gotoAndPlay\"}}{{/crossLink}}, etc.)",
            "itemtype": "property",
            "name": "_dispatchAnimationEnd",
            "access": "private",
            "tagname": "",
            "type": "{Function}",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 413,
            "itemtype": "property",
            "name": "DisplayObject_cloneProps",
            "access": "private",
            "tagname": "",
            "type": "{Function}",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 420,
            "itemtype": "method",
            "name": "cloneProps",
            "params": [
                {
                    "name": "o",
                    "description": "",
                    "type": "Text"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/BitmapAnimation.js",
            "line": 436,
            "description": "Moves the playhead to the specified frame number or animation.",
            "itemtype": "method",
            "name": "_goto",
            "params": [
                {
                    "name": "frameOrAnimation",
                    "description": "The frame number or animation that the playhead should move to.",
                    "type": "String|Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "BitmapAnimation"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 60,
            "description": "The array of children in the display list. You should usually use the child management methods such as\n{{#crossLink \"Container/addChild\"}}{{/crossLink}}, {{#crossLink \"Container/removeChild\"}}{{/crossLink}},\n{{#crossLink \"Container/swapChildren\"}}{{/crossLink}}, etc, rather than accessing this directly, but it is\nincluded for advanced uses.",
            "itemtype": "property",
            "name": "children",
            "type": "Array",
            "default": "null",
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 73,
            "itemtype": "property",
            "name": "DisplayObject_initialize",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 80,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 92,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\n\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 105,
            "itemtype": "property",
            "name": "DisplayObject_draw",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 112,
            "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\n\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache.\nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 141,
            "description": "Adds a child to the top of the display list.\n\n<h4>Example</h4>\n     container.addChild(bitmapInstance);\n\n You can also add multiple children at once:\n\n     container.addChild(bitmapInstance, shapeInstance, textInstance);",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "The display object to add.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "The child that was added, or the last child if multiple children were added.",
                "type": "DisplayObject"
            },
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 168,
            "description": "Adds a child to the display list at the specified index, bumping children at equal or greater indexes up one, and\nsetting its parent to this Container.\n\n<h4>Example</h4>\n     addChildAt(child1, index);\n\nYou can also add multiple children, such as:\n\n     addChildAt(child1, child2, ..., index);\n\nThe index must be between 0 and numChildren. For example, to add myShape under otherShape in the display list,\nyou could use:\n\n     container.addChildAt(myShape, container.getChildIndex(otherShape));\n\nThis would also bump otherShape's index up by one. Fails silently if the index is out of range.",
            "itemtype": "method",
            "name": "addChildAt",
            "params": [
                {
                    "name": "child",
                    "description": "The display object to add.",
                    "type": "DisplayObject"
                },
                {
                    "name": "index",
                    "description": "The index to add the child at.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the last child that was added, or the last child if multiple children were added.",
                "type": "DisplayObject"
            },
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 205,
            "description": "Removes the specified child from the display list. Note that it is faster to use removeChildAt() if the index is\nalready known.\n\n<h4>Example</h4>\n     container.removeChild(child);\n\nYou can also remove multiple children:\n\n     removeChild(child1, child2, ...);\n\nReturns true if the child (or children) was removed, or false if it was not in the display list.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": "The child to remove.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "true if the child (or children) was removed, or false if it was not in the display list.",
                "type": "Boolean"
            },
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 231,
            "description": "Removes the child at the specified index from the display list, and sets its parent to null.\n\n<h4>Example</h4>\n\n     container.removeChildAt(2);\n\nYou can also remove multiple children:\n\n     container.removeChild(2, 7, ...)\n\nReturns true if the child (or children) was removed, or false if any index was out of range.",
            "itemtype": "method",
            "name": "removeChildAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the child to remove.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if the child (or children) was removed, or false if any index was out of range.",
                "type": "Boolean"
            },
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 264,
            "description": "Removes all children from the display list.\n\n<h4>Example</h4>\n     container.removeAlLChildren();",
            "itemtype": "method",
            "name": "removeAllChildren",
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 277,
            "description": "Returns the child at the specified index.\n\n<h4>Example</h4>\n     container.getChildAt(2);",
            "itemtype": "method",
            "name": "getChildAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the child to return.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The child at the specified index. Returns null if there is no child at the index.",
                "type": "DisplayObject"
            },
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 291,
            "description": "Returns the child with the specified name.",
            "itemtype": "method",
            "name": "getChildByName",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the child to return.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The child with the specified name.",
                "type": "DisplayObject"
            },
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 305,
            "description": "Performs an array sort operation on the child list.\n\n<h4>Example</h4>\n     var sortFunction = function(item1, item2, options) {\n         if (item1 > item2) { return 1; }\n         if (item1 < item2) { return -1; }\n         return 0;\n     }\n     container.sortChildren(sortFunction);",
            "itemtype": "method",
            "name": "sortChildren",
            "params": [
                {
                    "name": "sortFunction",
                    "description": "the function to use to sort the child list. See JavaScript's <code>Array.sort</code>\ndocumentation for details.",
                    "type": "Function"
                }
            ],
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 324,
            "description": "Returns the index of the specified child in the display list, or -1 if it is not in the display list.\n\n<h4>Example</h4>\n     var index = container.getChildIndex(child);",
            "itemtype": "method",
            "name": "getChildIndex",
            "params": [
                {
                    "name": "child",
                    "description": "The child to return the index of.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "The index of the specified child. -1 if the child is not found.",
                "type": "Number"
            },
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 338,
            "description": "Returns the number of children in the display list.",
            "itemtype": "method",
            "name": "getNumChildren",
            "return": {
                "description": "The number of children in the display list.",
                "type": "Number"
            },
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 347,
            "description": "Swaps the children at the specified indexes. Fails silently if either index is out of range.",
            "itemtype": "method",
            "name": "swapChildrenAt",
            "params": [
                {
                    "name": "index1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "index2",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 362,
            "description": "Swaps the specified children's depth in the display list. Fails silently if either child is not a child of this\nContainer.",
            "itemtype": "method",
            "name": "swapChildren",
            "params": [
                {
                    "name": "child1",
                    "description": "",
                    "type": "DisplayObject"
                },
                {
                    "name": "child2",
                    "description": "",
                    "type": "DisplayObject"
                }
            ],
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 382,
            "description": "Changes the depth of the specified child. Fails silently if the child is not a child of this container, or the index is out of range.",
            "params": [
                {
                    "name": "child",
                    "description": "",
                    "type": "DisplayObject"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setChildIndex",
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 400,
            "description": "Returns true if the specified display object either is this container or is a descendent (child, grandchild, etc)\nof this container.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "child",
                    "description": "The DisplayObject to be checked.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "true if the specified display object either is this container or is a descendent.",
                "type": "Boolean"
            },
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 415,
            "description": "Tests whether the display object intersects the specified local point (ie. draws a pixel with alpha > 0 at the\nspecified position). This ignores the alpha, shadow and compositeOperation of the display object, and all\ntransform properties including regX/Y.",
            "itemtype": "method",
            "name": "hitTest",
            "params": [
                {
                    "name": "x",
                    "description": "The x position to check in the display object's local coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position to check in the display object's local coordinates.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A Boolean indicating whether there is a visible section of a DisplayObject that overlaps the specified\ncoordinates.",
                "type": "Boolean"
            },
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 430,
            "description": "Returns an array of all display objects under the specified coordinates that are in this container's display\nlist. This routine ignores any display objects with mouseEnabled set to false. The array will be sorted in order\nof visual depth, with the top-most display object at index 0. This uses shape based hit detection, and can be an\nexpensive operation to run, so it is best to use it carefully. For example, if testing for objects under the\nmouse, test on tick (instead of on mousemove), and only if the mouse's position has changed.",
            "itemtype": "method",
            "name": "getObjectsUnderPoint",
            "params": [
                {
                    "name": "x",
                    "description": "The x position in the container to test.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position in the container to test.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An Array of DisplayObjects under the specified coordinates.",
                "type": "Array"
            },
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 448,
            "description": "Similar to {{#crossLink \"Container/getObjectsUnderPoint()\"}}{{/crossLink}}, but returns only the top-most display\nobject. This runs significantly faster than <code>getObjectsUnderPoint()<code>, but is still an expensive\noperation. See {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}} for more information.",
            "itemtype": "method",
            "name": "getObjectUnderPoint",
            "params": [
                {
                    "name": "x",
                    "description": "The x position in the container to test.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position in the container to test.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The top-most display object under the specified coordinates.",
                "type": "DisplayObject"
            },
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 462,
            "description": "Returns a clone of this Container. Some properties that are specific to this instance's current context are\nreverted to their defaults (for example .parent).",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "recursive",
                    "description": "If true, all of the descendants of this container will be cloned recursively. If false, the\nproperties of the container will be cloned, but the new instance will not have any children.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "A clone of the current Container instance.",
                "type": "Container"
            },
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 484,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 494,
            "itemtype": "property",
            "name": "DisplayObject__tick",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 501,
            "itemtype": "method",
            "name": "_tick",
            "access": "protected",
            "tagname": "",
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/Container.js",
            "line": 513,
            "itemtype": "method",
            "name": "_getObjectsUnderPoint",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "mouseEvents",
                    "description": "A bitmask indicating which event types to look for. Bit 1 specifies press &\nclick & double click, bit 2 specifies it should look for mouse over and mouse out. This implementation may change.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "protected",
            "tagname": "",
            "class": "Container"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 74,
            "description": "The DOM object to manage.",
            "itemtype": "property",
            "name": "htmlElement",
            "type": "HTMLElement",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 82,
            "itemtype": "property",
            "name": "_oldMtx",
            "access": "protected",
            "tagname": "",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 89,
            "itemtype": "property",
            "name": "DisplayObject_initialize",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 96,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 113,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 124,
            "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache.\nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean"
                }
            ],
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 156,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "cache",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 162,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "uncache",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 168,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "updateCache",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 174,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "hitArea",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 180,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "localToGlobal",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 186,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "globalToLocal",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 192,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "localToLocal",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 198,
            "description": "DOMElement cannot be cloned. Throws an error.",
            "itemtype": "method",
            "name": "clone",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 206,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 215,
            "description": "Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\nare not full EaselJS display objects and do not participate in EaselJS mouse events.",
            "itemtype": "event",
            "name": "click",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 221,
            "description": "Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\nare not full EaselJS display objects and do not participate in EaselJS mouse events.",
            "itemtype": "event",
            "name": "dblClick",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 227,
            "description": "Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\nare not full EaselJS display objects and do not participate in EaselJS mouse events.",
            "itemtype": "event",
            "name": "mousedown",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 233,
            "description": "The HTMLElement can listen for the mouseover event, not the DOMElement instance.\nSince DOMElement instances are not full EaselJS display objects and do not participate in EaselJS mouse events.",
            "itemtype": "event",
            "name": "mouseover",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 239,
            "description": "Not applicable to DOMElement.",
            "itemtype": "event",
            "name": "tick",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 246,
            "itemtype": "property",
            "name": "DisplayObject__tick",
            "type": "Function",
            "access": "protected",
            "tagname": "",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DOMElement.js",
            "line": 253,
            "itemtype": "method",
            "name": "_tick",
            "access": "protected",
            "tagname": "",
            "class": "DOMElement"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 140,
            "description": "Suppresses errors generated when using features like hitTest, mouse events, and getObjectsUnderPoint with cross\ndomain content",
            "itemtype": "property",
            "name": "suppressCrossDomainErrors",
            "static": 1,
            "type": "{Boolean}",
            "default": "false",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 150,
            "itemtype": "property",
            "name": "_hitTestCanvas",
            "type": "{HTMLCanvasElement | Object}",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 159,
            "itemtype": "property",
            "name": "_hitTestContext",
            "type": "{CanvasRenderingContext2D}",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 167,
            "itemtype": "property",
            "name": "_nextCacheID",
            "type": "{Number}",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 177,
            "description": "Dispatched when the user presses their left mouse button over the display object. See the \n{{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.",
            "itemtype": "event",
            "name": "mousedown",
            "since": "0.6.0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 184,
            "description": "Dispatched when the user presses their left mouse button and then releases it while over the display object.\nSee the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.",
            "itemtype": "event",
            "name": "click",
            "since": "0.6.0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 191,
            "description": "Dispatched when the user double clicks their left mouse button over this display object.\nSee the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.",
            "itemtype": "event",
            "name": "dblclick",
            "since": "0.6.0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 198,
            "description": "Dispatched when the user's mouse rolls over this display object. This event must be enabled using \n{{#crossLink \"Stage.enableMouseOver\"}}{{/crossLink}}.\nSee the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.",
            "itemtype": "event",
            "name": "mouseover",
            "since": "0.6.0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 207,
            "description": "Dispatched when the user's mouse rolls out of this display object. This event must be enabled using \n{{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\nSee the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.",
            "itemtype": "event",
            "name": "mouseout",
            "since": "0.6.0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 215,
            "description": "Dispatched on each display object on a stage whenever the stage updates. This occurs immediately before the\nrendering (draw) pass. When {{#crossLink \"Stage/update\"}}{{/crossLink}} is called, first all display objects on\nthe stage dispatch the tick event, then all of the display objects are drawn to stage. Children will have their\ntick event dispatched in order of their depth prior to the event being dispatched on their parent.",
            "itemtype": "event",
            "name": "tick",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "An array containing any arguments that were passed to the Stage.update() method. For\n     example if you called stage.update(\"hello\"), then the params would be [\"hello\"].",
                    "type": "Array"
                }
            ],
            "since": "0.6.0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 229,
            "description": "The alpha (transparency) for this display object. 0 is fully transparent, 1 is fully opaque.",
            "itemtype": "property",
            "name": "alpha",
            "type": "{Number}",
            "default": "1",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 237,
            "description": "If a cache is active, this returns the canvas that holds the cached version of this display object. See cache()\nfor more information. READ-ONLY.",
            "itemtype": "property",
            "name": "cacheCanvas",
            "type": "{HTMLCanvasElement | Object}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 246,
            "description": "Unique ID for this display object. Makes display objects easier for some uses.",
            "itemtype": "property",
            "name": "id",
            "type": "{Number}",
            "default": "-1",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 254,
            "description": "Indicates whether to include this object when running mouse interactions. Setting this to `false` for children\nof a {{#crossLink \"Container\"}}{{/crossLink}} will cause events on the Container to not fire when that child is\nclicked. Note that setting this property to `false` does not prevent the {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}\nmethod from returning the child.",
            "itemtype": "property",
            "name": "mouseEnabled",
            "type": "{Boolean}",
            "default": "true",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 265,
            "description": "An optional name for this display object. Included in toString(). Useful for debugging.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 273,
            "description": "A reference to the Container or Stage object that contains this display object, or null if it has not been added\nto one. READ-ONLY.",
            "itemtype": "property",
            "name": "parent",
            "final": 1,
            "type": "{Container}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 283,
            "description": "The x offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate around\nit's center, you would set regX and regY to 50.",
            "itemtype": "property",
            "name": "regX",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 292,
            "description": "The y offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate around\nit's center, you would set regX and regY to 50.",
            "itemtype": "property",
            "name": "regY",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 301,
            "description": "The rotation in degrees for this display object.",
            "itemtype": "property",
            "name": "rotation",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 309,
            "description": "The factor to stretch this display object horizontally. For example, setting scaleX to 2 will stretch the display\nobject to twice it's nominal width. To horizontally flip an object, set the scale to a negative number.",
            "itemtype": "property",
            "name": "scaleX",
            "type": "{Number}",
            "default": "1",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 318,
            "description": "The factor to stretch this display object vertically. For example, setting scaleY to 0.5 will stretch the display\nobject to half it's nominal height. To vertically flip an object, set the scale to a negative number.",
            "itemtype": "property",
            "name": "scaleY",
            "type": "{Number}",
            "default": "1",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 327,
            "description": "The factor to skew this display object horizontally.",
            "itemtype": "property",
            "name": "skewX",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 335,
            "description": "The factor to skew this display object vertically.",
            "itemtype": "property",
            "name": "skewY",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 343,
            "description": "A shadow object that defines the shadow to render on this display object. Set to null to remove a shadow. If\nnull, this property is inherited from the parent container.",
            "itemtype": "property",
            "name": "shadow",
            "type": "{Shadow}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 352,
            "description": "Indicates whether this display object should be rendered to the canvas and included when running\nStage.getObjectsUnderPoint().",
            "itemtype": "property",
            "name": "visible",
            "type": "{Boolean}",
            "default": "true",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 361,
            "description": "The x (horizontal) position of the display object, relative to its parent.",
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 369,
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 376,
            "description": "The composite operation indicates how the pixels of this display object will be composited with the elements\nbehind it. If null, this property is inherited from the parent container. For more information, read the\n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing\">\nwhatwg spec on compositing</a>.",
            "itemtype": "property",
            "name": "compositeOperation",
            "type": "{String}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 387,
            "description": "Indicates whether the display object should have it's x & y position rounded prior to drawing it to stage.\nSnapping to whole pixels can result in a sharper and faster draw for images (ex. Bitmap & cached objects).\nThis only applies if the enclosing stage has snapPixelsEnabled set to true. The snapToPixel property is true\nby default for Bitmap and BitmapAnimation instances, and false for all other display objects.\n<br/><br/>\nNote that this applies only rounds the display object's local position. You should\nensure that all of the display object's ancestors (parent containers) are also on a whole pixel. You can do this\nby setting the ancestors' snapToPixel property to true.",
            "itemtype": "property",
            "name": "snapToPixel",
            "type": "{Boolean}",
            "default": "false",
            "deprecated": true,
            "deprecationMessage": "Hardware acceleration in modern browsers makes this unnecessary.",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 403,
            "description": "The onPress callback is called when the user presses down on their mouse over this display object. The handler\nis passed a single param containing the corresponding MouseEvent instance. You can subscribe to the onMouseMove\nand onMouseUp callbacks of the event object to receive these events until the user releases the mouse button.\nIf an onPress handler is set on a container, it will receive the event if any of its children are clicked.",
            "itemtype": "property",
            "name": "onPress",
            "type": "{Function}",
            "deprecated": true,
            "deprecationMessage": "In favour of the \"mousedown\" event. Will be removed in a future version.",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 414,
            "description": "The onClick callback is called when the user presses down on and then releases the mouse button over this\ndisplay object. The handler is passed a single param containing the corresponding MouseEvent instance. If an\nonClick handler is set on a container, it will receive the event if any of its children are clicked.",
            "itemtype": "property",
            "name": "onClick",
            "type": "{Function}",
            "deprecated": true,
            "deprecationMessage": "In favour of the \"click\" event. Will be removed in a future version.",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 424,
            "description": "The onDoubleClick callback is called when the user double clicks over this display object. The handler is\npassed a single param containing the corresponding MouseEvent instance. If an onDoubleClick handler is set\non a container, it will receive the event if any of its children are clicked.",
            "itemtype": "property",
            "name": "onDoubleClick",
            "type": "{Function}",
            "deprecated": true,
            "deprecationMessage": "In favour of the \"dblClick\" event. Will be removed in a future version.",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 434,
            "description": "The onMouseOver callback is called when the user rolls over the display object. You must enable this event using\nstage.enableMouseOver(). The handler is passed a single param containing the corresponding MouseEvent instance.",
            "itemtype": "property",
            "name": "onMouseOver",
            "type": "{Function}",
            "deprecated": true,
            "deprecationMessage": "In favour of the \"mouseover\" event. Will be removed in a future version.",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 443,
            "description": "The onMouseOut callback is called when the user rolls off of the display object. You must enable this event using\nstage.enableMouseOver(). The handler is passed a single param containing the corresponding MouseEvent instance.",
            "itemtype": "property",
            "name": "onMouseOut",
            "type": "{Function}",
            "deprecated": true,
            "deprecationMessage": "In favour of the \"mouseout\" event. Will be removed in a future version.",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 452,
            "description": "The onTick callback is called on each display object on a stage whenever the stage updates.\nThis occurs immediately before the rendering (draw) pass. When stage.update() is called, first all display\nobjects on the stage have onTick called, then all of the display objects are drawn to stage. Children will have\ntheir `onTick` called in order of their depth prior to onTick being called on their parent.\n\nAny parameters passed in to `stage.update()` are passed on to the `onTick()` handlers. For example, if you call\n`stage.update(\"hello\")`, all of the display objects with a handler will have `onTick(\"hello\")` called.",
            "itemtype": "property",
            "name": "onTick",
            "type": "{Function}",
            "deprecated": true,
            "deprecationMessage": "In favour of the \"tick\" event. Will be removed in a future version.",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 466,
            "description": "An array of Filter objects to apply to this display object. Filters are only applied / updated when `cache()` or\n`updateCache()` is called on the display object, and only apply to the area that is cached.",
            "itemtype": "property",
            "name": "filters",
            "type": "{Array}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 475,
            "description": "Returns an ID number that uniquely identifies the current cache for this display object. This can be used to * determine if the cache has changed since a previous check.",
            "itemtype": "property",
            "name": "cacheID",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 483,
            "description": "A Shape instance that defines a vector mask (clipping path) for this display object.  The shape's transformation\nwill be applied relative to the display object's parent coordinates (as if it were a child of the parent).",
            "itemtype": "property",
            "name": "mask",
            "type": "{Shape}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 492,
            "description": "A display object that will be tested when checking mouse interactions or testing {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}.\nThe hit area will have its transformation applied relative to this display object's coordinate space (as though\nthe hit test object were a child of this display object and relative to its regX/Y). The hitArea will be tested\nusing only its own `alpha` value regardless of the alpha value on the target display object, or the target's\nancestors (parents).\n\nNote that hitArea is NOT currently used by the `hitTest()` method, nor is it supported for {{#crossLink \"Stage\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "hitArea",
            "type": "{DisplayObject}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 506,
            "description": "A CSS cursor (ex. \"pointer\", \"help\", \"text\", etc) that will be displayed when the user hovers over this display\nobject. You must enable mouseover events using the {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}} method to\nuse this property. If null it will use the default cursor.",
            "itemtype": "property",
            "name": "cursor",
            "type": "{String}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 530,
            "itemtype": "property",
            "name": "_cacheOffsetX",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 538,
            "itemtype": "property",
            "name": "_cacheOffsetY",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 546,
            "itemtype": "property",
            "name": "_cacheScale",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "1",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 554,
            "itemtype": "property",
            "name": "_cacheDataURLID",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 562,
            "itemtype": "property",
            "name": "_cacheDataURL",
            "access": "protected",
            "tagname": "",
            "type": "{String}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 570,
            "itemtype": "property",
            "name": "_matrix",
            "access": "protected",
            "tagname": "",
            "type": "{Matrix2D}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 582,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 593,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\n\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 605,
            "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns <code>true</code> if the draw was handled (useful for overriding functionality).\n\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache. For example,\nused for drawing the cache (to prevent it from simply drawing an existing cache back into itself).",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 623,
            "description": "Applies this display object's transformation, alpha, globalCompositeOperation, clipping path (mask), and shadow\nto the specified context. This is typically called prior to {{#crossLink \"DisplayObject/draw\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "updateContext",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D to update.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 652,
            "description": "Draws the display object into a new canvas, which is then used for subsequent draws. For complex content\nthat does not change frequently (ex. a Container with many children that do not move, or a complex vector Shape),\nthis can provide for much faster rendering because the content does not need to be re-rendered each tick. The\ncached display object can be moved, rotated, faded, etc freely, however if it's content changes, you must\nmanually update the cache by calling <code>updateCache()</code> or <code>cache()</code> again. You must specify\nthe cache area via the x, y, w, and h parameters. This defines the rectangle that will be rendered and cached\nusing this display object's coordinates.\n\n<h4>Example</h4>\nFor example if you defined a Shape that drew a circle at 0, 0 with a radius of 25:\n\n     var shape = new createjs.Shape();\n     shape.graphics.beginFill(\"#ff0000\").drawCircle(0, 0, 25);\n     myShape.cache(-25, -25, 50, 50);\n\nNote that filters need to be defined <em>before</em> the cache is applied. Check out the {{#crossLink \"Filter\"}}{{/crossLink}}\nclass for more information.",
            "itemtype": "method",
            "name": "cache",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate origin for the cache region.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate origin for the cache region.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width of the cache region.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of the cache region.",
                    "type": "Number"
                },
                {
                    "name": "scale",
                    "description": "The scale at which the cache will be created. For example, if you cache a vector shape using\n\tmyShape.cache(0,0,100,100,2) then the resulting cacheCanvas will be 200x200 px. This lets you scale and rotate\n\tcached elements with greater fidelity. Default is 1.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 692,
            "description": "Redraws the display object to its cache. Calling updateCache without an active cache will throw an error.\nIf compositeOperation is null the current cache will be cleared prior to drawing. Otherwise the display object\nwill be drawn over the existing cache using the specified compositeOperation.\n\n<h4>Example</h4>\nClear the current graphics of a cached shape, draw some new instructions, and then update the cache. The new line\nwill be drawn on top of the old one.\n\n     // Not shown: Creating the shape, and caching it.\n     shapeInstance.clear();\n     shapeInstance.setStrokeStyle(3).beginStroke(\"#ff0000\").moveTo(100, 100).lineTo(200,200);\n     shapeInstance.updateCache();",
            "itemtype": "method",
            "name": "updateCache",
            "params": [
                {
                    "name": "compositeOperation",
                    "description": "The compositeOperation to use, or null to clear the cache and redraw it.\n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing\">\nwhatwg spec on compositing</a>.",
                    "type": "String"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 725,
            "description": "Clears the current cache. See {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} for more information.",
            "itemtype": "method",
            "name": "uncache",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 735,
            "description": "Returns a data URL for the cache, or null if this display object is not cached.\nUses cacheID to ensure a new data URL is not generated if the cache has not changed.",
            "itemtype": "method",
            "name": "getCacheDataURL.",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 746,
            "description": "Returns the stage that this display object will be rendered on, or null if it has not been added to one.",
            "itemtype": "method",
            "name": "getStage",
            "return": {
                "description": "The Stage instance that the display object is a descendent of. null if the DisplayObject has not\nbeen added to a Stage.",
                "type": "Stage"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 762,
            "description": "Transforms the specified x and y position from the coordinate space of the display object\nto the global (stage) coordinate space. For example, this could be used to position an HTML label\nover a specific point on a nested display object. Returns a Point instance with x and y properties\ncorrelating to the transformed coordinates on the stage.\n\n<h4>Example</h4>\n\n     displayObject.x = 300;\n     displayObject.y = 200;\n     stage.addChild(displayObject);\n     var point = myDisplayObject.localToGlobal(100, 100);\n     // Results in x=400, y=300",
            "itemtype": "method",
            "name": "localToGlobal",
            "params": [
                {
                    "name": "x",
                    "description": "The x position in the source display object to transform.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position in the source display object to transform.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A Point instance with x and y properties correlating to the transformed coordinates\non the stage.",
                "type": "Point"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 789,
            "description": "Transforms the specified x and y position from the global (stage) coordinate space to the\ncoordinate space of the display object. For example, this could be used to determine\nthe current mouse position within the display object. Returns a Point instance with x and y properties\ncorrelating to the transformed position in the display object's coordinate space.\n\n<h4>Example</h4>\n\n     displayObject.x = 300;\n     displayObject.y = 200;\n     stage.addChild(displayObject);\n     var point = myDisplayObject.globalToLocal(100, 100);\n     // Results in x=-200, y=-100",
            "itemtype": "method",
            "name": "globalToLocal",
            "params": [
                {
                    "name": "x",
                    "description": "The x position on the stage to transform.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position on the stage to transform.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A Point instance with x and y properties correlating to the transformed position in the\ndisplay object's coordinate space.",
                "type": "Point"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 817,
            "description": "Transforms the specified x and y position from the coordinate space of this display object to the coordinate\nspace of the target display object. Returns a Point instance with x and y properties correlating to the\ntransformed position in the target's coordinate space. Effectively the same as using the following code with\n{{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}} and {{#crossLink \"DisplayObject/globalToLocal\"}}{{/crossLink}}.\n\n     var pt = this.localToGlobal(x, y);\n     pt = target.globalToLocal(pt.x, pt.y);",
            "itemtype": "method",
            "name": "localToLocal",
            "params": [
                {
                    "name": "x",
                    "description": "The x position in the source display object to transform.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position on the stage to transform.",
                    "type": "Number"
                },
                {
                    "name": "target",
                    "description": "The target display object to which the coordinates will be transformed.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "Returns a Point instance with x and y properties correlating to the transformed position\nin the target's coordinate space.",
                "type": "Point"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 838,
            "description": "Shortcut method to quickly set the transform properties on the display object. All parameters are optional.\nOmitted parameters will have the default value set.\n\n<h4>Example</h4>\n\n     displayObject.setTransform(100, 100, 2, 2);",
            "itemtype": "method",
            "name": "setTransform",
            "params": [
                {
                    "name": "x",
                    "description": "The horizontal translation (x position) in pixels",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "The vertical translation (y position) in pixels",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "scaleX",
                    "description": "The horizontal scale, as a percentage of 1",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "scaleY",
                    "description": "the vertical scale, as a percentage of 1",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "rotation",
                    "description": "The rotation, in degrees",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "skewX",
                    "description": "The horizontal skew factor",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "skewY",
                    "description": "The vertical skew factor",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "regX",
                    "description": "The horizontal registration point in pixels",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "regY",
                    "description": "The vertical registration point in pixels",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "Returns this instance. Useful for chaining commands.",
                "type": "DisplayObject"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 871,
            "description": "Returns a matrix based on this object's transform.",
            "itemtype": "method",
            "name": "getMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "Optional. A Matrix2D object to populate with the calculated values. If null, a new\nMatrix object is returned.",
                    "type": "Matrix2D"
                }
            ],
            "return": {
                "description": "A matrix representing this display object's transform.",
                "type": "Matrix2D"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 883,
            "description": "Generates a concatenated Matrix2D object representing the combined transform of the display object and all of its\nparent Containers up to the highest level ancestor (usually the {{#crossLink \"Stage\"}}{{/crossLink}}). This can\nbe used to transform positions between coordinate spaces, such as with {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}}\nand {{#crossLink \"DisplayObject/globalToLocal\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getConcatenatedMatrix",
            "params": [
                {
                    "name": "mtx",
                    "description": "A {{#crossLink \"Matrix2D\"}}{{/crossLink}} object to populate with the calculated values.\nIf null, a new Matrix2D object is returned.",
                    "type": "Matrix2D",
                    "optional": true
                }
            ],
            "return": {
                "description": "a concatenated Matrix2D object representing the combined transform of the display object and\nall of its parent Containers up to the highest level ancestor (usually the {{#crossLink \"Stage\"}}{{/crossLink}}).",
                "type": "Matrix2D"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 905,
            "description": "Tests whether the display object intersects the specified local point (ie. draws a pixel with alpha > 0 at\nthe specified position). This ignores the alpha, shadow and compositeOperation of the display object, and all\ntransform properties including regX/Y.\n\n<h4>Example</h4>\n\n     stage.addEventListener(\"stagemousedown\", handleMouseDown);\n     function handleMouseDown(event) {\n         var hit = myShape.hitTest(event.stageX, event.stageY);\n     }\n\nPlease note that shape-to-shape collision is not currently supported by EaselJS.",
            "itemtype": "method",
            "name": "hitTest",
            "params": [
                {
                    "name": "x",
                    "description": "The x position to check in the display object's local coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position to check in the display object's local coordinates.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A Boolean indicting whether a visible portion of the DisplayObject intersect the specified\nlocal Point.",
                "type": "Boolean"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 935,
            "description": "Provides a chainable shortcut method for setting a number of properties on a DisplayObject instance.\n\n<h4>Example</h4>\n\n     var myGraphics = new createjs.Graphics().beginFill(\"#ff0000\").drawCircle(0, 0, 25);\n     var shape = stage.addChild(new Shape())\n         .set({graphics:myGraphics, x:100, y:100, alpha:0.5});",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "props",
                    "description": "A generic object containing properties to copy to the DisplayObject instance.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns The DisplayObject instance the method is called on (useful for chaining calls.)",
                "type": "DisplayObject"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 953,
            "description": "Returns a clone of this DisplayObject. Some properties that are specific to this instance's current context are\nreverted to their defaults (for example .parent).",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A clone of the current DisplayObject instance.",
                "type": "DisplayObject"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 965,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 977,
            "itemtype": "method",
            "name": "cloneProps",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "o",
                    "description": "The DisplayObject instance which will have properties from the current DisplayObject\ninstance copied into.",
                    "type": "DisplayObject"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 1005,
            "itemtype": "method",
            "name": "_applyShadow",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "shadow",
                    "description": "",
                    "type": "Shadow"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 1020,
            "itemtype": "method",
            "name": "_tick",
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 1032,
            "itemtype": "method",
            "name": "_testHit",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 1049,
            "itemtype": "method",
            "name": "_applyFilters",
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/DisplayObject.js",
            "line": 1064,
            "description": "Indicates whether the display object has a listener of the corresponding event types.",
            "itemtype": "method",
            "name": "_hasMouseHandler",
            "params": [
                {
                    "name": "typeMask",
                    "description": "A bitmask indicating which event types to look for. Bit 1 specifies press &\nclick & double click, bit 2 specifies it should look for mouse over and mouse out. This implementation may change.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 46,
            "itemtype": "method",
            "name": "exec",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "scope",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Command",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 131,
            "description": "Returns a CSS compatible color string based on the specified RGB numeric color values in the format \n\"rgba(255,255,255,1.0)\", or if alpha is null then in the format \"rgb(255,255,255)\". For example,\n\n     Graphics.getRGB(50, 100, 150, 0.5);\n     // Returns \"rgba(50,100,150,0.5)\"\n\nIt also supports passing a single hex color value as the first param, and an optional alpha value as the second\nparam. For example,\n\n     Graphics.getRGB(0xFF00FF, 0.2);\n     // Returns \"rgba(255,0,255,0.2)\"",
            "itemtype": "method",
            "name": "getRGB",
            "static": 1,
            "params": [
                {
                    "name": "r",
                    "description": "The red component for the color, between 0 and 0xFF (255).",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "The green component for the color, between 0 and 0xFF (255).",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "The blue component for the color, between 0 and 0xFF (255).",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "The alpha component for the color where 0 is fully transparent and 1 is fully opaque.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "A CSS compatible color string based on the specified RGB numeric color values in the format \n\"rgba(255,255,255,1.0)\", or if alpha is null then in the format \"rgb(255,255,255)\".",
                "type": "String"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 167,
            "description": "Returns a CSS compatible color string based on the specified HSL numeric color values in the format \"hsla(360,100,100,1.0)\", \nor if alpha is null then in the format \"hsl(360,100,100)\".\n\n     Graphics.getHSL(150, 100, 70);\n     // Returns \"hsl(150,100,70)\"",
            "itemtype": "method",
            "name": "getHSL",
            "static": 1,
            "params": [
                {
                    "name": "hue",
                    "description": "The hue component for the color, between 0 and 360.",
                    "type": "Number"
                },
                {
                    "name": "saturation",
                    "description": "The saturation component for the color, between 0 and 100.",
                    "type": "Number"
                },
                {
                    "name": "lightness",
                    "description": "The lightness component for the color, between 0 and 100.",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "The alpha component for the color where 0 is fully transparent and 1 is fully opaque.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "A CSS compatible color string based on the specified HSL numeric color values in the format \n\"hsla(360,100,100,1.0)\", or if alpha is null then in the format \"hsl(360,100,100)\".",
                "type": "String"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 191,
            "description": "Map of Base64 characters to values. Used by {{#crossLink \"Graphics/decodePath\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "BASE_64",
            "static": 1,
            "final": 1,
            "type": "{Object}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 201,
            "description": "Maps numeric values for the caps parameter of {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} to\ncorresponding string values. This is primarily for use with the tiny API. The mappings are as follows: 0 to\n\"butt\", 1 to \"round\", and 2 to \"square\".\nFor example, to set the line caps to \"square\":\n\n     myGraphics.ss(16, 2);",
            "itemtype": "property",
            "name": "STROKE_CAPS_MAP",
            "static": 1,
            "final": 1,
            "type": "{Array}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 216,
            "description": "Maps numeric values for the joints parameter of {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} to\ncorresponding string values. This is primarily for use with the tiny API. The mappings are as follows: 0 to\n\"miter\", 1 to \"round\", and 2 to \"bevel\".\nFor example, to set the line joints to \"bevel\":\n\n     myGraphics.ss(16, 0, 2);",
            "itemtype": "property",
            "name": "STROKE_JOINTS_MAP",
            "static": 1,
            "final": 1,
            "type": "{Array}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 231,
            "itemtype": "property",
            "name": "_ctx",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "type": "{CanvasRenderingContext2D}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 239,
            "itemtype": "property",
            "name": "beginCmd",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "type": "{Command}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 247,
            "itemtype": "property",
            "name": "fillCmd",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "type": "{Command}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 255,
            "itemtype": "property",
            "name": "strokeCmd",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "type": "{Command}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 266,
            "itemtype": "property",
            "name": "_strokeInstructions",
            "access": "protected",
            "tagname": "",
            "type": "{Array}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 273,
            "itemtype": "property",
            "name": "_strokeStyleInstructions",
            "access": "protected",
            "tagname": "",
            "type": "{Array}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 280,
            "itemtype": "property",
            "name": "_ignoreScaleStroke",
            "access": "protected",
            "tagname": "",
            "type": "Boolean",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 287,
            "itemtype": "property",
            "name": "_fillInstructions",
            "access": "protected",
            "tagname": "",
            "type": "{Array}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 294,
            "itemtype": "property",
            "name": "_instructions",
            "access": "protected",
            "tagname": "",
            "type": "{Array}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 301,
            "itemtype": "property",
            "name": "_oldInstructions",
            "access": "protected",
            "tagname": "",
            "type": "{Array}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 308,
            "itemtype": "property",
            "name": "_activeInstructions",
            "access": "protected",
            "tagname": "",
            "type": "{Array}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 315,
            "itemtype": "property",
            "name": "_active",
            "access": "protected",
            "tagname": "",
            "type": "{Boolean}",
            "default": "false",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 323,
            "itemtype": "property",
            "name": "_dirty",
            "access": "protected",
            "tagname": "",
            "type": "{Boolean}",
            "default": "false",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 331,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 341,
            "description": "Returns true if this Graphics instance has no drawing commands.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "Returns true if this Graphics instance has no drawing commands.",
                "type": "Boolean"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 350,
            "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\n\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 366,
            "description": "Draws only the path described for this Graphics instance, skipping any non-path instructions, including fill and\nstroke descriptions. Used by <code>DisplayObject.clippingPath</code> to draw the clipping path, for example.",
            "itemtype": "method",
            "name": "drawAsPath",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 382,
            "description": "Moves the drawing point to the specified position. A tiny API method \"mt\" also exists.",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate the drawing point should move to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate the drawing point should move to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls).",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 394,
            "description": "Draws a line from the current drawing point to the specified position, which become the new current drawing\npoint. A tiny API method \"lt\" also exists.\n\nFor detailed information, read the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#complex-shapes-(paths)\">\nwhatwg spec</a>.",
            "itemtype": "method",
            "name": "lineTo",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate the drawing point should draw to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate the drawing point should draw to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 412,
            "description": "Draws an arc with the specified control points and radius.  For detailed information, read the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arcto\">\nwhatwg spec</a>. A tiny API method \"at\" also exists.",
            "itemtype": "method",
            "name": "arcTo",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 430,
            "description": "Draws an arc defined by the radius, startAngle and endAngle arguments, centered at the position (x, y). For\nexample, to draw a full circle with a radius of 20 centered at (100, 100):\n\n     arc(100, 100, 20, 0, Math.PI*2);\n\nFor detailed information, read the\n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arc\">whatwg spec</a>.\nA tiny API method \"a\" also exists.",
            "itemtype": "method",
            "name": "arc",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "startAngle",
                    "description": "Measured in radians.",
                    "type": "Number"
                },
                {
                    "name": "endAngle",
                    "description": "Measured in radians.",
                    "type": "Number"
                },
                {
                    "name": "anticlockwise",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 455,
            "description": "Draws a quadratic curve from the current drawing point to (x, y) using the control point (cpx, cpy). For detailed\ninformation, read the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-quadraticcurveto\">\nwhatwg spec</a>. A tiny API method \"qt\" also exists.",
            "itemtype": "method",
            "name": "quadraticCurveTo",
            "params": [
                {
                    "name": "cpx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cpy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 472,
            "description": "Draws a bezier curve from the current drawing point to (x, y) using the control points (cp1x, cp1y) and (cp2x,\ncp2y). For detailed information, read the\n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-beziercurveto\">\nwhatwg spec</a>. A tiny API method \"bt\" also exists.",
            "itemtype": "method",
            "name": "bezierCurveTo",
            "params": [
                {
                    "name": "cp1x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cp1y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cp2x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cp2y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 492,
            "description": "Draws a rectangle at (x, y) with the specified width and height using the current fill and/or stroke.\nFor detailed information, read the\n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-rect\">\nwhatwg spec</a>. A tiny API method \"r\" also exists.",
            "itemtype": "method",
            "name": "rect",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "Width of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height of the rectangle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 510,
            "description": "Closes the current path, effectively drawing a line from the current drawing point to the first drawing point specified\nsince the fill or stroke was last set. A tiny API method \"cp\" also exists.",
            "itemtype": "method",
            "name": "closePath",
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 526,
            "description": "Clears all drawing instructions, effectively resetting this Graphics instance. Any line and fill styles will need\nto be redefined to draw shapes following a clear call. A tiny API method \"c\" also exists.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 541,
            "description": "Begins a fill with the specified color. This ends the current sub-path. A tiny API method \"f\" also exists.",
            "itemtype": "method",
            "name": "beginFill",
            "params": [
                {
                    "name": "color",
                    "description": "A CSS compatible color value (ex. \"red\", \"#FF0000\", or \"rgba(255,0,0,0.5)\"). Setting to\nnull will result in no fill.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 554,
            "description": "Begins a linear gradient fill defined by the line (x0, y0) to (x1, y1). This ends the current sub-path. For\nexample, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a\nsquare to display it:\n\n     myGraphics.beginLinearGradientFill([\"#000\",\"#FFF\"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);\n\nA tiny API method \"lf\" also exists.",
            "itemtype": "method",
            "name": "beginLinearGradientFill",
            "params": [
                {
                    "name": "colors",
                    "description": "An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient\ndrawing from red to blue.",
                    "type": "Array"
                },
                {
                    "name": "ratios",
                    "description": "An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw\nthe first color to 10% then interpolating to the second color at 90%.",
                    "type": "Array"
                },
                {
                    "name": "x0",
                    "description": "The position of the first point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "The position of the first point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "The position of the second point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "The position of the second point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 583,
            "description": "Begins a radial gradient fill. This ends the current sub-path. For example, the following code defines a red to\nblue radial gradient centered at (100, 100), with a radius of 50, and draws a circle to display it:\n\n     myGraphics.beginRadialGradientFill([\"#F00\",\"#00F\"], [0, 1], 100, 100, 0, 100, 100, 50).drawCircle(100, 100, 50);\n\nA tiny API method \"rf\" also exists.",
            "itemtype": "method",
            "name": "beginRadialGradientFill",
            "params": [
                {
                    "name": "colors",
                    "description": "An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\na gradient drawing from red to blue.",
                    "type": "Array"
                },
                {
                    "name": "ratios",
                    "description": "An array of gradient positions which correspond to the colors. For example, [0.1,\n0.9] would draw the first color to 10% then interpolating to the second color at 90%.",
                    "type": "Array"
                },
                {
                    "name": "x0",
                    "description": "Center position of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "Center position of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "r0",
                    "description": "Radius of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "Center position of the outer circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "Center position of the outer circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "r1",
                    "description": "Radius of the outer circle that defines the gradient.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 613,
            "description": "Begins a pattern fill using the specified image. This ends the current sub-path. A tiny API method \"bf\" also\nexists.",
            "itemtype": "method",
            "name": "beginBitmapFill",
            "params": [
                {
                    "name": "image",
                    "description": "The Image, Canvas, or Video object to use\nas the pattern.",
                    "type": "HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
                },
                {
                    "name": "repetition",
                    "description": "Optional. Indicates whether to repeat the image in the fill area. One of \"repeat\",\n\"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\". Note that Firefox does not support \"repeat-x\" or\n\"repeat-y\" (latest tests were in FF 20.0), and will default to \"repeat\".",
                    "type": "String"
                },
                {
                    "name": "matrix",
                    "description": "Optional. Specifies a transformation matrix for the bitmap fill. This transformation\nwill be applied relative to the parent transform.",
                    "type": "Matrix2D"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 647,
            "description": "Ends the current sub-path, and begins a new one with no fill. Functionally identical to <code>beginFill(null)</code>.\nA tiny API method \"ef\" also exists.",
            "itemtype": "method",
            "name": "endFill",
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 657,
            "description": "Sets the stroke style for the current sub-path. Like all drawing methods, this can be chained, so you can define\nthe stroke style and color in a single line of code like so:\n\n     myGraphics.setStrokeStyle(8,\"round\").beginStroke(\"#F00\");\n\nA tiny API method \"ss\" also exists.",
            "itemtype": "method",
            "name": "setStrokeStyle",
            "params": [
                {
                    "name": "thickness",
                    "description": "The width of the stroke.",
                    "type": "Number"
                },
                {
                    "name": "caps",
                    "description": "Indicates the type of caps to use at the end of lines. One of butt,\nround, or square. Defaults to \"butt\". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with\nthe tiny API.",
                    "type": "String | Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "joints",
                    "description": "Specifies the type of joints that should be used where two lines meet.\nOne of bevel, round, or miter. Defaults to \"miter\". Also accepts the values 0 (miter), 1 (round), and 2 (bevel)\nfor use with the tiny API.",
                    "type": "String | Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "miterLimit",
                    "description": "If joints is set to \"miter\", then you can specify a miter limit ratio which\ncontrols at what point a mitered joint will be clipped.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "10"
                },
                {
                    "name": "ignoreScale",
                    "description": "If true, the stroke will be drawn at the specified thickness regardless\nof active transformations.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 690,
            "description": "Begins a stroke with the specified color. This ends the current sub-path. A tiny API method \"s\" also exists.",
            "itemtype": "method",
            "name": "beginStroke",
            "params": [
                {
                    "name": "color",
                    "description": "A CSS compatible color value (ex. \"#FF0000\", \"red\", or \"rgba(255,0,0,0.5)\"). Setting to\nnull will result in no stroke.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 703,
            "description": "Begins a linear gradient stroke defined by the line (x0, y0) to (x1, y1). This ends the current sub-path. For\nexample, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a\nsquare to display it:\n\n     myGraphics.setStrokeStyle(10).\n         beginLinearGradientStroke([\"#000\",\"#FFF\"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);\n\nA tiny API method \"ls\" also exists.",
            "itemtype": "method",
            "name": "beginLinearGradientStroke",
            "params": [
                {
                    "name": "colors",
                    "description": "An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\na gradient drawing from red to blue.",
                    "type": "Array"
                },
                {
                    "name": "ratios",
                    "description": "An array of gradient positions which correspond to the colors. For example, [0.1,\n0.9] would draw the first color to 10% then interpolating to the second color at 90%.",
                    "type": "Array"
                },
                {
                    "name": "x0",
                    "description": "The position of the first point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "The position of the first point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "The position of the second point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "The position of the second point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 734,
            "description": "Begins a radial gradient stroke. This ends the current sub-path. For example, the following code defines a red to\nblue radial gradient centered at (100, 100), with a radius of 50, and draws a rectangle to display it:\n\n     myGraphics.setStrokeStyle(10)\n         .beginRadialGradientStroke([\"#F00\",\"#00F\"], [0, 1], 100, 100, 0, 100, 100, 50)\n         .drawRect(50, 90, 150, 110);\n\nA tiny API method \"rs\" also exists.",
            "itemtype": "method",
            "name": "beginRadialGradientStroke",
            "params": [
                {
                    "name": "colors",
                    "description": "An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\na gradient drawing from red to blue.",
                    "type": "Array"
                },
                {
                    "name": "ratios",
                    "description": "An array of gradient positions which correspond to the colors. For example, [0.1,\n0.9] would draw the first color to 10% then interpolating to the second color at 90%, then draw the second color\nto 100%.",
                    "type": "Array"
                },
                {
                    "name": "x0",
                    "description": "Center position of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "Center position of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "r0",
                    "description": "Radius of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "Center position of the outer circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "Center position of the outer circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "r1",
                    "description": "Radius of the outer circle that defines the gradient.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 767,
            "description": "Begins a pattern fill using the specified image. This ends the current sub-path. Note that unlike bitmap fills,\nstrokes do not currently support a matrix parameter due to limitations in the canvas API. A tiny API method \"bs\"\nalso exists.",
            "itemtype": "method",
            "name": "beginBitmapStroke",
            "params": [
                {
                    "name": "image",
                    "description": "The Image, Canvas, or Video object to use\nas the pattern.",
                    "type": "HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
                },
                {
                    "name": "repetition",
                    "description": "Optional. Indicates whether to repeat the image in the fill area. One of\n\"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\".",
                    "type": "String",
                    "optional": true,
                    "optdefault": "repeat"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 786,
            "description": "Ends the current sub-path, and begins a new one with no stroke. Functionally identical to <code>beginStroke(null)</code>.\nA tiny API method \"es\" also exists.",
            "itemtype": "method",
            "name": "endStroke",
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 797,
            "description": "Maps the familiar ActionScript <code>curveTo()</code> method to the functionally similar {{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}}\nmethod.",
            "itemtype": "method",
            "name": "curveTo",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 805,
            "description": "Maps the familiar ActionScript <code>drawRect()</code> method to the functionally similar {{#crossLink \"Graphics/rect\"}}{{/crossLink}}\nmethod.",
            "itemtype": "method",
            "name": "drawRect",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 813,
            "description": "Draws a rounded rectangle with all corners with the specified radius.",
            "itemtype": "method",
            "name": "drawRoundRect",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "Corner radius.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 828,
            "description": "Draws a rounded rectangle with different corner radii. Supports positive and negative corner radii. A tiny API\nmethod \"rc\" also exists.",
            "itemtype": "method",
            "name": "drawRoundRectComplex",
            "params": [
                {
                    "name": "x",
                    "description": "The horizontal coordinate to draw the round rect.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The vertical coordinate to draw the round rect.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "The width of the round rect.",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "The height of the round rect.",
                    "type": "Number"
                },
                {
                    "name": "radiusTL",
                    "description": "Top left corner radius.",
                    "type": "Number"
                },
                {
                    "name": "radiusTR",
                    "description": "Top right corner radius.",
                    "type": "Number"
                },
                {
                    "name": "radiusBR",
                    "description": "Bottom right corner radius.",
                    "type": "Number"
                },
                {
                    "name": "radiusBL",
                    "description": "Bottom left corner radius.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 870,
            "description": "Draws a circle with the specified radius at (x, y).\n\n     var g = new Graphics();\n\t    g.setStrokeStyle(1);\n\t    g.beginStroke(Graphics.getRGB(0,0,0));\n\t    g.beginFill(Graphics.getRGB(255,0,0));\n\t    g.drawCircle(0,0,3);\n\n\t    var s = new Shape(g);\n\t\ts.x = 100;\n\t\ts.y = 100;\n\n\t    stage.addChild(s);\n\t    stage.update();\n\nA tiny API method \"dc\" also exists.",
            "itemtype": "method",
            "name": "drawCircle",
            "params": [
                {
                    "name": "x",
                    "description": "x coordinate center point of circle.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y coordinate center point of circle.",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "Radius of circle.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 898,
            "description": "Draws an ellipse (oval) with a specified width (w) and height (h). Similar to {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}},\nexcept the width and height can be different. A tiny API method \"de\" also exists.",
            "itemtype": "method",
            "name": "drawEllipse",
            "params": [
                {
                    "name": "x",
                    "description": "x coordinate center point of ellipse.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y coordinate center point of ellipse.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "height (horizontal diameter) of ellipse. The horizontal radius will be half of this number.",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "width (vertical diameter) of ellipse. The vertical radius will be half of this number.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 928,
            "description": "Draws a star if pointSize is greater than 0, or a regular polygon if pointSize is 0 with the specified number of\npoints. For example, the following code will draw a familiar 5 pointed star shape centered at 100, 100 and with a\nradius of 50:\n\n     myGraphics.beginFill(\"#FF0\").drawPolyStar(100, 100, 50, 5, 0.6, -90);\n     // Note: -90 makes the first point vertical\n\nA tiny API method \"dp\" also exists.",
            "itemtype": "method",
            "name": "drawPolyStar",
            "params": [
                {
                    "name": "x",
                    "description": "Position of the center of the shape.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Position of the center of the shape.",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "The outer radius of the shape.",
                    "type": "Number"
                },
                {
                    "name": "sides",
                    "description": "The number of points on the star or sides on the polygon.",
                    "type": "Number"
                },
                {
                    "name": "pointSize",
                    "description": "The depth or \"pointy-ness\" of the star points. A pointSize of 0 will draw a regular\npolygon (no points), a pointSize of 1 will draw nothing because the points are infinitely pointy.",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "The angle of the first point / corner. For example a value of 0 will draw the first point\ndirectly to the right of the center.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 969,
            "description": "Decodes a compact encoded path string into a series of draw instructions.\nThis format is not intended to be human readable, and is meant for use by authoring tools.\nThe format uses a base64 character set, with each character representing 6 bits, to define a series of draw\ncommands.\n\nEach command is comprised of a single \"header\" character followed by a variable number of alternating x and y\nposition values. Reading the header bits from left to right (most to least significant): bits 1 to 3 specify the\ntype of operation (0-moveTo, 1-lineTo, 2-quadraticCurveTo, 3-bezierCurveTo, 4-closePath, 5-7 unused). Bit 4\nindicates whether position values use 12 bits (2 characters) or 18 bits (3 characters), with a one indicating the\nlatter. Bits 5 and 6 are currently unused.\n\nFollowing the header is a series of 0 (closePath), 2 (moveTo, lineTo), 4 (quadraticCurveTo), or 6 (bezierCurveTo)\nparameters. These parameters are alternating x/y positions represented by 2 or 3 characters (as indicated by the\n4th bit in the command char). These characters consist of a 1 bit sign (1 is negative, 0 is positive), followed\nby an 11 (2 char) or 17 (3 char) bit integer value. All position values are in tenths of a pixel. Except in the\ncase of move operations which are absolute, this value is a delta from the previous x or y position (as\nappropriate).\n\nFor example, the string \"A3cAAMAu4AAA\" represents a line starting at -150,0 and ending at 150,0.\n<br />A - bits 000000. First 3 bits (000) indicate a moveTo operation. 4th bit (0) indicates 2 chars per\nparameter.\n<br />n0 - 110111011100. Absolute x position of -150.0px. First bit indicates a negative value, remaining bits\nindicate 1500 tenths of a pixel.\n<br />AA - 000000000000. Absolute y position of 0.\n<br />I - 001100. First 3 bits (001) indicate a lineTo operation. 4th bit (1) indicates 3 chars per parameter.\n<br />Au4 - 000000101110111000. An x delta of 300.0px, which is added to the previous x value of -150.0px to\nprovide an absolute position of +150.0px.\n<br />AAA - 000000000000000000. A y delta value of 0.\n\nA tiny API method \"p\" also exists.",
            "itemtype": "method",
            "name": "decodePath",
            "params": [
                {
                    "name": "str",
                    "description": "The path string to decode.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1040,
            "description": "Returns a clone of this Graphics instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A clone of the current Graphics instance.",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1058,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1069,
            "itemtype": "method",
            "name": "mt",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1076,
            "itemtype": "method",
            "name": "lt",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1083,
            "itemtype": "method",
            "name": "at",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1090,
            "itemtype": "method",
            "name": "bt",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1097,
            "itemtype": "method",
            "name": "qt",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1104,
            "itemtype": "method",
            "name": "a",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1111,
            "itemtype": "method",
            "name": "r",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1118,
            "itemtype": "method",
            "name": "cp",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1125,
            "itemtype": "method",
            "name": "c",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1132,
            "itemtype": "method",
            "name": "f",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1139,
            "itemtype": "method",
            "name": "lf",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1146,
            "itemtype": "method",
            "name": "rf",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1153,
            "itemtype": "method",
            "name": "bf",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1160,
            "itemtype": "method",
            "name": "ef",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1167,
            "itemtype": "method",
            "name": "ss",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1174,
            "itemtype": "method",
            "name": "s",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1181,
            "itemtype": "method",
            "name": "ls",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1188,
            "itemtype": "method",
            "name": "rs",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1195,
            "itemtype": "method",
            "name": "bs",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1202,
            "itemtype": "method",
            "name": "es",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1209,
            "itemtype": "method",
            "name": "dr",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1216,
            "itemtype": "method",
            "name": "rr",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1223,
            "itemtype": "method",
            "name": "rc",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1230,
            "itemtype": "method",
            "name": "dc",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1237,
            "itemtype": "method",
            "name": "de",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1244,
            "itemtype": "method",
            "name": "dp",
            "access": "protected",
            "tagname": "",
            "type": "{Function}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1251,
            "itemtype": "method",
            "name": "p",
            "access": "protected",
            "tagname": "t@ype Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1260,
            "itemtype": "method",
            "name": "_updateInstructions",
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1289,
            "itemtype": "method",
            "name": "_newPath",
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Graphics.js",
            "line": 1301,
            "description": "Used to create Commands that set properties",
            "itemtype": "method",
            "name": "_setProp",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 89,
            "description": "Read-only. The MovieClip will advance independently of its parent, even if its parent is paused.\nThis is the default mode.",
            "itemtype": "property",
            "name": "INDEPENDENT",
            "static": 1,
            "type": "String",
            "default": "\"independent\"",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 99,
            "description": "Read-only. The MovieClip will only display a single frame (as determined by the startPosition property).",
            "itemtype": "property",
            "name": "SINGLE_FRAME",
            "static": 1,
            "type": "String",
            "default": "\"single\"",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 108,
            "description": "Read-only. The MovieClip will be advanced only when it's parent advances and will be synched to the position of\nthe parent MovieClip.",
            "itemtype": "property",
            "name": "SYNCHED",
            "static": 1,
            "type": "String",
            "default": "\"synched\"",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 120,
            "description": "Controls how this MovieClip advances its time. Must be one of 0 (INDEPENDENT), 1 (SINGLE_FRAME), or 2 (SYNCHED).\nSee each constant for a description of the behaviour.",
            "itemtype": "property",
            "name": "mode",
            "type": "String",
            "default": "null",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 129,
            "description": "Specifies what the first frame to play in this movieclip, or the only frame to display if mode is SINGLE_FRAME.",
            "itemtype": "property",
            "name": "startPosition",
            "type": "Number",
            "default": "0",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 137,
            "description": "Indicates whether this MovieClip should loop when it reaches the end of its timeline.",
            "itemtype": "property",
            "name": "loop",
            "type": "Boolean",
            "default": "true",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 145,
            "description": "Read-Only. The current frame of the movieclip.",
            "itemtype": "property",
            "name": "currentFrame",
            "type": "Number",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 152,
            "description": "The TweenJS Timeline that is associated with this MovieClip. This is created automatically when the MovieClip\ninstance is initialized. Animations are created by adding <a href=\"http://tweenjs.com\">TweenJS</a> Tween\ninstances to the timeline.\n\n<h4>Example</h4>\n     var tween = createjs.Tween.get(target).to({x:0}).to({x:100}, 30);\n     var mc = new createjs.MovieClip();\n     mc.timeline.addTween(tween);\n\nElements can be added and removed from the timeline by toggling an \"_off\" property\nusing the <code>tweenInstance.to()</code> method. Note that using <code>Tween.set</code> is not recommended to\ncreate MovieClip animations. The following example will toggle the target off on frame 0, and then back on for\nframe 1. You can use the \"visible\" property to achieve the same effect.\n\n     var tween = createjs.Tween.get(target).to({_off:false})\n         .wait(1).to({_off:true})\n         .wait(1).to({_off:false});",
            "itemtype": "property",
            "name": "timeline",
            "type": "Timeline",
            "default": "null",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 177,
            "description": "If true, the MovieClip's position will not advance when ticked.",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "default": "false",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 185,
            "description": "If true, actions in this MovieClip's tweens will be run when the playhead advances.",
            "itemtype": "property",
            "name": "actionsEnabled",
            "type": "Boolean",
            "default": "true",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 193,
            "description": "If true, the MovieClip will automatically be reset to its first frame whenever the timeline adds\nit back onto the display list. This only applies to MovieClip instances with mode=INDEPENDENT.\n<br><br>\nFor example, if you had a character animation with a \"body\" child MovieClip instance\nwith different costumes on each frame, you could set body.autoReset = false, so that\nyou can manually change the frame it is on, without worrying that it will be reset\nautomatically.",
            "itemtype": "property",
            "name": "autoReset",
            "type": "Boolean",
            "default": "true",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 211,
            "itemtype": "property",
            "name": "_synchOffset",
            "type": "Number",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 219,
            "itemtype": "property",
            "name": "_prevPos",
            "type": "Number",
            "default": "-1",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 227,
            "itemtype": "property",
            "name": "_prevPosition",
            "type": "Number",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 235,
            "description": "List of display objects that are actively being managed by the MovieClip.",
            "itemtype": "property",
            "name": "_managed",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 245,
            "itemtype": "property",
            "name": "DisplayObject_initialize",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 252,
            "description": "Initialization method called by the constructor.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 268,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 280,
            "itemtype": "property",
            "name": "Container_draw",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 287,
            "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache.\nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean"
                }
            ],
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 305,
            "description": "Sets paused to false.",
            "itemtype": "method",
            "name": "play",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 313,
            "description": "Sets paused to true.",
            "itemtype": "method",
            "name": "stop",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 321,
            "description": "Advances this movie clip to the specified position or label and sets paused to false.",
            "itemtype": "method",
            "name": "gotoAndPlay",
            "params": [
                {
                    "name": "positionOrLabel",
                    "description": "",
                    "type": "String|Number"
                }
            ],
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 331,
            "description": "Advances this movie clip to the specified position or label and sets paused to true.",
            "itemtype": "method",
            "name": "gotoAndStop",
            "params": [
                {
                    "name": "positionOrLabel",
                    "description": "",
                    "type": "String|Number"
                }
            ],
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 341,
            "description": "MovieClip instances cannot be cloned.",
            "itemtype": "method",
            "name": "clone",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 350,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 361,
            "itemtype": "property",
            "name": "Container__tick",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 368,
            "itemtype": "method",
            "name": "_tick",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 379,
            "itemtype": "method",
            "name": "_goto",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 392,
            "itemtype": "method",
            "name": "_reset",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 401,
            "itemtype": "method",
            "name": "_updateTimeline",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 451,
            "itemtype": "method",
            "name": "_setState",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 466,
            "description": "Adds a child to the timeline, and sets it up as a managed child.",
            "itemtype": "method",
            "name": "_addManagedChild",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 499,
            "itemtype": "method",
            "name": "priority",
            "access": "private",
            "tagname": "",
            "class": "MovieClipPlugin",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 505,
            "itemtype": "method",
            "name": "install",
            "access": "private",
            "tagname": "",
            "class": "MovieClipPlugin",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 513,
            "itemtype": "method",
            "name": "init",
            "access": "private",
            "tagname": "",
            "class": "MovieClipPlugin",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 521,
            "itemtype": "method",
            "name": "step",
            "access": "private",
            "tagname": "",
            "class": "MovieClipPlugin",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/MovieClip.js",
            "line": 529,
            "itemtype": "method",
            "name": "tween",
            "access": "private",
            "tagname": "",
            "class": "MovieClipPlugin",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Shadow.js",
            "line": 54,
            "description": "An identity shadow object (all properties are set to 0). Read-only.",
            "itemtype": "property",
            "name": "identity",
            "type": "Shadow",
            "static": 1,
            "final": 1,
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Shadow.js",
            "line": 64,
            "description": "property color",
            "type": "String",
            "default": "null",
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Shadow.js",
            "line": 71,
            "description": "property offsetX",
            "type": "Number",
            "default": "0",
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Shadow.js",
            "line": 78,
            "description": "property offsetY",
            "type": "Number",
            "default": "0",
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Shadow.js",
            "line": 85,
            "description": "property blur",
            "type": "Number",
            "default": "0",
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Shadow.js",
            "line": 93,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "color",
                    "description": "The color of the shadow.",
                    "type": "String"
                },
                {
                    "name": "offsetX",
                    "description": "The x offset of the shadow.",
                    "type": "Number"
                },
                {
                    "name": "offsetY",
                    "description": "The y offset of the shadow.",
                    "type": "Number"
                },
                {
                    "name": "blur",
                    "description": "The size of the blurring effect.",
                    "type": "Number"
                }
            ],
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Shadow.js",
            "line": 110,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Shadow.js",
            "line": 120,
            "description": "Returns a clone of this Shadow instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A clone of the current Shadow instance.",
                "type": "Shadow"
            },
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Shape.js",
            "line": 62,
            "description": "The graphics instance to display.",
            "itemtype": "property",
            "name": "graphics",
            "type": "Graphics",
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Shape.js",
            "line": 70,
            "itemtype": "property",
            "name": "DisplayObject_initialize",
            "access": "private",
            "tagname": "",
            "type": "Function",
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Shape.js",
            "line": 77,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "graphics",
                    "description": "",
                    "type": "Graphics"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Shape.js",
            "line": 88,
            "description": "Returns true or false indicating whether the Shape would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the Shape would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Shape.js",
            "line": 100,
            "itemtype": "property",
            "name": "DisplayObject_draw",
            "access": "private",
            "tagname": "",
            "type": "Function",
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Shape.js",
            "line": 107,
            "description": "Draws the Shape into the specified context ignoring it's visible, alpha, shadow, and transform. Returns true if\nthe draw was handled (useful for overriding functionality).\n\n<i>NOTE: This method is mainly for internal use, though it may be useful for advanced uses.</i>",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache. For example,\nused for drawing the cache (to prevent it from simply drawing an existing cache back into itself).",
                    "type": "Boolean"
                }
            ],
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Shape.js",
            "line": 123,
            "description": "Returns a clone of this Shape. Some properties that are specific to this instance's current context are reverted to \ntheir defaults (for example .parent).",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "recursive",
                    "description": "If true, this Shape's {{#crossLink \"Graphics\"}}{{/crossLink}} instance will also be\ncloned. If false, the Graphics instance will be shared with the new Shape.",
                    "type": "Boolean"
                }
            ],
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Shape.js",
            "line": 136,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 132,
            "description": "Dispatched when all images are loaded.  Note that this only fires if the images\nwere not fully loaded when the sprite sheet was initialized. You should check the complete property \nto prior to adding a listener. Ex.\n<pre><code>var sheet = new SpriteSheet(data);\nif (!sheet.complete) {\n &nbsp; // not preloaded, listen for onComplete:\n &nbsp; sheet.addEventListener(\"complete\", handler);\n}</code></pre>",
            "itemtype": "event",
            "name": "complete",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                }
            ],
            "since": "0.6.0",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 148,
            "description": "Read-only property indicating whether all images are finished loading.",
            "itemtype": "property",
            "name": "complete",
            "type": "Boolean",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 156,
            "description": "The onComplete callback is called when all images are loaded. Note that this only fires if the images\nwere not fully loaded when the sprite sheet was initialized. You should check the complete property \nto prior to adding an onComplete handler. Ex.\n<pre><code>var sheet = new SpriteSheet(data);\nif (!sheet.complete) {\n &nbsp; // not preloaded, listen for onComplete:\n &nbsp; sheet.onComplete = handler;\n}</code></pre>",
            "itemtype": "property",
            "name": "onComplete",
            "type": "Function",
            "deprecated": true,
            "deprecationMessage": "In favour of the \"complete\" event. Will be removed in a future version.",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 182,
            "itemtype": "property",
            "name": "_animations",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 188,
            "itemtype": "property",
            "name": "_frames",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 194,
            "itemtype": "property",
            "name": "_images",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 200,
            "itemtype": "property",
            "name": "_data",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 206,
            "itemtype": "property",
            "name": "_loadCount",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 213,
            "itemtype": "property",
            "name": "_frameHeight",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 219,
            "itemtype": "property",
            "name": "_frameWidth",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 225,
            "itemtype": "property",
            "name": "_numFrames",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 231,
            "itemtype": "property",
            "name": "_regX",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 237,
            "itemtype": "property",
            "name": "_regY",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 244,
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 326,
            "description": "Returns the total number of frames in the specified animation, or in the whole sprite\nsheet if the animation param is omitted.",
            "itemtype": "method",
            "name": "getNumFrames",
            "params": [
                {
                    "name": "animation",
                    "description": "The name of the animation to get a frame count for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The number of frames in the animation, or in the entire sprite sheet if the animation param is omitted.",
                "type": "Number"
            },
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 343,
            "description": "Returns an array of all available animation names as strings.",
            "itemtype": "method",
            "name": "getAnimations",
            "return": {
                "description": "an array of animation names available on this sprite sheet.",
                "type": "Array"
            },
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 352,
            "description": "Returns an object defining the specified animation. The returned object has a\nframes property containing an array of the frame id's in the animation, a frequency\nproperty indicating the advance frequency for this animation, a name property, \nand a next property, which specifies the default next animation. If the animation\nloops, the name and next property will be the same.",
            "itemtype": "method",
            "name": "getAnimation",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a generic object with frames, frequency, name, and next properties.",
                "type": "Object"
            },
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 366,
            "description": "Returns an object specifying the image and source rect of the specified frame. The returned object\nhas an image property holding a reference to the image object in which the frame is found,\nand a rect property containing a Rectangle instance which defines the boundaries for the\nframe within that image.",
            "itemtype": "method",
            "name": "getFrame",
            "params": [
                {
                    "name": "frameIndex",
                    "description": "The index of the frame.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a generic object with image and rect properties. Returns null if the frame does not exist, or the image is not fully loaded.",
                "type": "Object"
            },
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 381,
            "description": "Returns a Rectangle instance defining the bounds of the specified frame relative to the origin. For example, a\n90 x 70 frame with a regX of 50 and a regY of 40 would return a rectangle with [x=-50, y=-40, width=90, height=70].",
            "itemtype": "method",
            "name": "getFrameBounds",
            "params": [
                {
                    "name": "frameIndex",
                    "description": "The index of the frame.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A Rectangle instance. Returns null if the frame does not exist, or the image is not fully loaded.",
                "type": "Rectangle"
            },
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 393,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 402,
            "description": "Returns a clone of the SpriteSheet instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the SpriteSheet instance.",
                "type": "SpriteSheet"
            },
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 423,
            "itemtype": "method",
            "name": "_handleImageLoad",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/SpriteSheet.js",
            "line": 436,
            "itemtype": "method",
            "name": "_calculateFrames",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 63,
            "itemtype": "property",
            "name": "_snapToPixelEnabled",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "type": "{Boolean}",
            "default": "false",
            "deprecated": true,
            "deprecationMessage": "Hardware acceleration in modern browsers makes this unnecessary.",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 75,
            "description": "Dispatched when the user moves the mouse over the canvas.\nSee the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.",
            "itemtype": "event",
            "name": "stagemousemove",
            "since": "0.6.0",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 82,
            "description": "Dispatched when the user presses their left mouse button on the canvas. See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\nclass for a listing of event properties.",
            "itemtype": "event",
            "name": "stagemousedown",
            "since": "0.6.0",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 89,
            "description": "Dispatched when the user the user releases the mouse button anywhere that the page can detect it (this varies slightly between browsers).\nSee the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.",
            "itemtype": "event",
            "name": "stagemouseup",
            "since": "0.6.0",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 97,
            "description": "Indicates whether the stage should automatically clear the canvas before each render. You can set this to <code>false</code>\nto manually control clearing (for generative art, or when pointing multiple stages at the same canvas for\nexample).\n\n<h4>Example</h4>\n\n     var stage = new createjs.Stage(\"canvasId\");\n     stage.autoClear = false;",
            "itemtype": "property",
            "name": "autoClear",
            "type": "Boolean",
            "default": "true",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 113,
            "description": "The canvas the stage will render to. Multiple stages can share a single canvas, but you must disable autoClear for all but the\nfirst stage that will be ticked (or they will clear each other's render).\n\nWhen changing the canvas property you must disable the events on the old canvas, and enable events on the\nnew canvas or mouse events will not work as expected. For example:\n\n     myStage.enableDOMEvents(false);\n     myStage.canvas = anotherCanvas;\n     myStage.enableDOMEvents(true);",
            "itemtype": "property",
            "name": "canvas",
            "type": "HTMLCanvasElement | Object",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 129,
            "description": "READ-ONLY. The current mouse X position on the canvas. If the mouse leaves the canvas, this will indicate the most recent\nposition over the canvas, and mouseInBounds will be set to false.",
            "itemtype": "property",
            "name": "mouseX",
            "type": "Number",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 137,
            "description": "READ-ONLY. The current mouse Y position on the canvas. If the mouse leaves the canvas, this will indicate the most recent\nposition over the canvas, and mouseInBounds will be set to false.",
            "itemtype": "property",
            "name": "mouseY",
            "type": "Number",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 145,
            "description": "The onMouseMove callback is called when the user moves the mouse over the canvas.  The handler is passed a single param\ncontaining the corresponding MouseEvent instance.",
            "itemtype": "property",
            "name": "onMouseMove",
            "type": "Function",
            "deprecated": true,
            "deprecationMessage": "In favour of the \"stagemousemove\" event. Will be removed in a future version.",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 154,
            "description": "The onMouseUp callback is called when the user releases the mouse button anywhere that the page can detect it.  The handler\nis passed a single param containing the corresponding MouseEvent instance.",
            "itemtype": "property",
            "name": "onMouseUp",
            "type": "Function",
            "deprecated": true,
            "deprecationMessage": "In favour of the \"stagemouseup\" event. Will be removed in a future version.",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 163,
            "description": "The onMouseDown callback is called when the user presses the mouse button over the canvas.  The handler is passed a single\nparam containing the corresponding MouseEvent instance.",
            "itemtype": "property",
            "name": "onMouseDown",
            "type": "Function",
            "deprecated": true,
            "deprecationMessage": "In favour of the \"stagemousedown\" event. Will be removed in a future version.",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 172,
            "description": "Indicates whether this stage should use the snapToPixel property of display objects when rendering them. See\nDisplayObject.snapToPixel for more information.",
            "itemtype": "property",
            "name": "snapToPixelEnabled",
            "type": "Boolean",
            "default": "false",
            "deprecated": true,
            "deprecationMessage": "Hardware acceleration makes this not beneficial",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 182,
            "description": "Indicates whether the mouse is currently within the bounds of the canvas.",
            "itemtype": "property",
            "name": "mouseInBounds",
            "type": "Boolean",
            "default": "false",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 190,
            "description": "If true, tick callbacks will be called on all display objects on the stage prior to rendering to the canvas.\nYou can call",
            "itemtype": "property",
            "name": "tickOnUpdate",
            "type": "Boolean",
            "default": "true",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 199,
            "description": "If true, mouse move events will continue to be called when the mouse leaves the target canvas. See\nmouseInBounds, and MouseEvent.x/y/rawX/rawY.",
            "itemtype": "property",
            "name": "mouseMoveOutside",
            "type": "Boolean",
            "default": "false",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 208,
            "description": "The hitArea property is not supported for Stage.",
            "itemtype": "property",
            "name": "hitArea",
            "type": "{DisplayObject}",
            "default": "null",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 217,
            "description": "Holds objects with data for each active pointer id. Each object has the following properties:\nx, y, event, target, overTarget, overX, overY, inBounds",
            "itemtype": "property",
            "name": "_pointerData",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 226,
            "description": "Number of active pointers.",
            "itemtype": "property",
            "name": "_pointerCount",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 234,
            "description": "Number of active pointers.",
            "itemtype": "property",
            "name": "_pointerCount",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 242,
            "itemtype": "property",
            "name": "_mouseOverIntervalID",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 250,
            "itemtype": "property",
            "name": "DisplayObject_initialize",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 257,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "canvas",
                    "description": "A canvas object, or the string id of a canvas object in the current document.",
                    "type": "HTMLCanvasElement | String | Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 272,
            "description": "Each time the update method is called, the stage will tick any descendants exposing a tick method (ex. {{#crossLink \"BitmapAnimation\"}}{{/crossLink}})\nand render its entire display list to the canvas. Any parameters passed to update will be passed on to any\n<code>tick</code> event handlers.",
            "itemtype": "method",
            "name": "update",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 290,
            "description": "Calls the {{#crossLink \"Stage/update\"}}{{/crossLink}} method. Useful for adding stage as a listener to\n{{#crossLink \"Ticker\"}}{{/crossLink}} directly.",
            "itemtype": "property",
            "name": "tick",
            "deprecated": true,
            "deprecationMessage": "In favour of using Ticker.addEventListener in conjunction with handleEvent.",
            "type": "Function",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 299,
            "description": "Default event handler that calls the Stage {{#crossLink \"Stage/update\"}}{{/crossLink}} method when a \"tick\" event\nis received. This allows you to register a Stage instance as a event listener on {{#crossLink \"Ticker\"}}{{/crossLink}}\ndirectly, using:\n\n     Ticker.addEventListener(\"tick\", myStage\");\n\nNote that if you subscribe to ticks using this pattern, then the tick event object will be passed through to\ndisplay object tick handlers, instead of <code>delta</code> and <code>paused</code> parameters.",
            "itemtype": "property",
            "name": "handleEvent",
            "type": "Function",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 315,
            "description": "Clears the target canvas. Useful if <code>autoClear</code> is set to false.",
            "itemtype": "method",
            "name": "clear",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 326,
            "description": "Returns a data url that contains a Base64-encoded image of the contents of the stage. The returned data url can\nbe specified as the src value of an image element.",
            "itemtype": "method",
            "name": "toDataURL",
            "params": [
                {
                    "name": "backgroundColor",
                    "description": "The background color to be used for the generated image. The value can be any value HTML color\nvalue, including HEX colors, rgb and rgba. The default value is a transparent background.",
                    "type": "String"
                },
                {
                    "name": "mimeType",
                    "description": "The MIME type of the image format to be create. The default is \"image/png\". If an unknown MIME type\nis passed in, or if the browser does not support the specified MIME type, the default value will be used.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a Base64 encoded image.",
                "type": "String"
            },
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 382,
            "description": "Enables or disables (by passing a frequency of 0) mouse over events (mouseover and mouseout) for this stage's\ndisplay list. These events can be expensive to generate, so they are disabled by default. The frequency of\nthe events can be controlled independently of mouse move events via the optional <code>frequency</code> parameter.\n\n<h4>Example</h4>\n     var stage = new createjs.Stage(\"canvasId\");\n     stage.enableMouseOver(10);",
            "itemtype": "method",
            "name": "enableMouseOver",
            "params": [
                {
                    "name": "frequency",
                    "description": "Optional param specifying the maximum number of times per second to broadcast\nmouse over/out events. Set to 0 to disable mouse over events completely. Maximum is 50. A lower frequency is less\nresponsive, but uses less CPU.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "20"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 407,
            "description": "Enables or disables the event listeners that stage adds to DOM elements (window, document and canvas).\nIt is good practice to disable events when disposing of a Stage instance, otherwise the stage will\ncontinue to receive events from the page.\n\nWhen changing the canvas property you must disable the events on the old canvas, and enable events on the\nnew canvas or mouse events will not work as expected. For example:\n\n     myStage.enableDOMEvents(false);\n     myStage.canvas = anotherCanvas;\n     myStage.enableDOMEvents(true);",
            "itemtype": "method",
            "name": "enableDOMEvents",
            "params": [
                {
                    "name": "enable",
                    "description": "Indicates whether to enable or disable the events. Default is true.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 447,
            "description": "Returns a clone of this Stage.",
            "return": {
                "description": "A clone of the current Container instance.",
                "type": "Stage"
            },
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 457,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 468,
            "itemtype": "method",
            "name": "_getPointerData",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 483,
            "itemtype": "method",
            "name": "_handleMouseMove",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 493,
            "itemtype": "method",
            "name": "_handlePointerMove",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                },
                {
                    "name": "pageX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "pageY",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 524,
            "itemtype": "method",
            "name": "_updatePointerPosition",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "pageX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "pageY",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 559,
            "itemtype": "method",
            "name": "_getElementRect",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 587,
            "itemtype": "method",
            "name": "_handleMouseUp",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 596,
            "itemtype": "method",
            "name": "_handlePointerUp",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                },
                {
                    "name": "clear",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 633,
            "itemtype": "method",
            "name": "_handleMouseDown",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 642,
            "itemtype": "method",
            "name": "_handlePointerDown",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 673,
            "itemtype": "method",
            "name": "_testMouseOver",
            "access": "protected",
            "tagname": "",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Stage.js",
            "line": 711,
            "itemtype": "method",
            "name": "_handleDoubleClick",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 67,
            "itemtype": "property",
            "name": "_workingContext",
            "type": "CanvasRenderingContext2D",
            "access": "private",
            "tagname": "",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 75,
            "description": "The text to display.",
            "itemtype": "property",
            "name": "text",
            "type": "String",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 82,
            "description": "The font style to use. Any valid value for the CSS font attribute is acceptable (ex. \"bold 36px Arial\").",
            "itemtype": "property",
            "name": "font",
            "type": "String",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 89,
            "description": "The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex. \"#F00\"). Default is \"#000\".",
            "itemtype": "property",
            "name": "color",
            "type": "String",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 96,
            "description": "The horizontal text alignment. Any of \"start\", \"end\", \"left\", \"right\", and \"center\". For detailed \ninformation view the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\nwhatwg spec</a>. Default is \"left\".",
            "itemtype": "property",
            "name": "textAlign",
            "type": "String",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 106,
            "description": "\"ideographic\", or \"bottom\". For detailed information view the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\nwhatwg spec</a>. Default is \"top\".",
            "itemtype": "property",
            "name": "textBaseline",
            "type": "String",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 115,
            "description": "shrunk to make it fit in this width. For detailed information view the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\nwhatwg spec</a>.",
            "itemtype": "property",
            "name": "maxWidth",
            "type": "Number",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 124,
            "itemtype": "property",
            "name": "outline",
            "type": "Boolean",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 130,
            "description": "the value of getMeasuredLineHeight is used.",
            "itemtype": "property",
            "name": "lineHeight",
            "type": "Number",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 137,
            "description": "Indicates the maximum width for a line of text before it is wrapped to multiple lines. If null, \nthe text will not be wrapped.",
            "itemtype": "property",
            "name": "lineWidth",
            "type": "Number",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 146,
            "itemtype": "property",
            "name": "DisplayObject_initialize",
            "access": "private",
            "tagname": "",
            "type": "Function",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 153,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 165,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 177,
            "itemtype": "property",
            "name": "DisplayObject_draw",
            "access": "private",
            "tagname": "",
            "type": "Function",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 184,
            "description": "Draws the Text into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache. \nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean"
                }
            ],
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 207,
            "description": "Returns the measured, untransformed width of the text without wrapping.",
            "itemtype": "method",
            "name": "getMeasuredWidth",
            "return": {
                "description": "The measured, untransformed width of the text.",
                "type": "Number"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 216,
            "description": "Returns an approximate line height of the text, ignoring the lineHeight property. This is based on the measured\nwidth of a \"M\" character multiplied by 1.2, which approximates em for most fonts.",
            "itemtype": "method",
            "name": "getMeasuredLineHeight",
            "return": {
                "description": "an approximate line height of the text, ignoring the lineHeight property. This is \nbased on the measured width of a \"M\" character multiplied by 1.2, which approximates em for most fonts.",
                "type": "Number"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 227,
            "description": "Returns the approximate height of multi-line text by multiplying the number of lines against either the\n<code>lineHeight</code> (if specified) or {{#crossLink \"Text/getMeasuredLineHeight\"}}{{/crossLink}}. Note that\nthis operation requires the text flowing logic to run, which has an associated CPU cost.",
            "itemtype": "method",
            "name": "getMeasuredHeight",
            "return": {
                "description": "The approximate height of the drawn multi-line text.",
                "type": "Number"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 238,
            "description": "Returns a clone of the Text instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Text instance.",
                "type": "Text"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 249,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 260,
            "itemtype": "property",
            "name": "DisplayObject_cloneProps",
            "access": "private",
            "tagname": "",
            "type": "Function",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 267,
            "itemtype": "method",
            "name": "cloneProps",
            "params": [
                {
                    "name": "o",
                    "description": "",
                    "type": "Text"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 282,
            "itemtype": "method",
            "name": "_getWorkingContext",
            "access": "protected",
            "tagname": "",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 294,
            "description": "Draws multiline text.",
            "itemtype": "method",
            "name": "_getWorkingContext",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "The number of lines drawn.",
                "type": "Number"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/display/Text.js",
            "line": 333,
            "itemtype": "method",
            "name": "_drawTextLine",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "text",
                    "description": "",
                    "type": "Text"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/EventDispatcher.js",
            "line": 74,
            "description": "Static initializer to mix in EventDispatcher methods.",
            "itemtype": "method",
            "name": "initialize",
            "static": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The target object to inject EventDispatcher methods into. This can be an instance or a\nprototype.",
                    "type": "Object"
                }
            ],
            "class": "EventDispatcher",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/EventDispatcher.js",
            "line": 90,
            "access": "protected",
            "tagname": "",
            "itemtype": "property",
            "name": "_listeners",
            "type": "Object",
            "class": "EventDispatcher",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/EventDispatcher.js",
            "line": 98,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "EventDispatcher",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/EventDispatcher.js",
            "line": 106,
            "description": "Adds the specified event listener. Note that adding multiple listeners to the same function will result in\nmultiple callbacks getting fired.\n\n<h4>Example</h4>\n\n     displayObject.addEventListener(\"click\", handleClick);\n     function handleClick(event) {\n        // Click happened.\n     }",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "An object with a handleEvent method, or a function that will be called when\nthe event is dispatched.",
                    "type": "Function | Object"
                }
            ],
            "return": {
                "description": "Returns the listener for chaining or assignment.",
                "type": "Function | Object"
            },
            "class": "EventDispatcher",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/EventDispatcher.js",
            "line": 133,
            "description": "Removes the specified event listener.\n\n<b>Important Note:</b> that you must pass the exact function reference used when the event was added. If a proxy\nfunction, or function closure is used as the callback, the proxy/closure reference must be used - a new proxy or\nclosure will not work.\n\n<h4>Example</h4>\n\n     displayObject.removeEventListener(\"click\", handleClick);",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The listener function or object.",
                    "type": "Function | Object"
                }
            ],
            "class": "EventDispatcher",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/EventDispatcher.js",
            "line": 162,
            "description": "Removes all listeners for the specified type, or all listeners of all types.\n\n<h4>Example</h4>\n\n     // Remove all listeners\n     displayObject.removeAllEvenListeners();\n\n     // Remove all click listeners\n     displayObject.removeAllEventListeners(\"click\");",
            "itemtype": "method",
            "name": "removeAllEventListeners",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event. If omitted, all listeners for all types will be removed.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "EventDispatcher",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/EventDispatcher.js",
            "line": 181,
            "description": "Dispatches the specified event to all listeners.\n\n<h4>Example</h4>\n\n     // Use a string event\n     this.dispatchEvent(\"complete\");\n\n     // Use an object\n     var event = {\n         type: \"complete\",\n         foo: \"bar\"\n     };\n     this.dispatchEvent(event);",
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "eventObj",
                    "description": "An object with a \"type\" property, or a string type. If a string is used,\ndispatchEvent will construct a generic event object with the specified type.",
                    "type": "Object | String"
                },
                {
                    "name": "target",
                    "description": "The object to use as the target property of the event object. This will default to the\ndispatching object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns true if any listener returned true.",
                "type": "Boolean"
            },
            "class": "EventDispatcher",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/EventDispatcher.js",
            "line": 220,
            "description": "Indicates whether there is at least one listener for the specified event type.",
            "itemtype": "method",
            "name": "hasEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if there is at least one listener for the specified event.",
                "type": "Boolean"
            },
            "class": "EventDispatcher",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/EventDispatcher.js",
            "line": 231,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "EventDispatcher",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/MouseEvent.js",
            "line": 57,
            "description": "For MouseEvent objects of type \"mousedown\", mousemove events will be dispatched from the event object until the user\nreleases the mouse anywhere.\nThis enables you to listen to mouse move interactions for the duration of a press, which can be very useful for\noperations such as drag and drop.\nSee the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.",
            "itemtype": "event",
            "name": "mousemove",
            "since": "0.6.0",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/MouseEvent.js",
            "line": 67,
            "description": "For MouseEvent objects of type \"mousedown\", a mouseup event will be dispatched from the event object when the user\nreleases the mouse anywhere.\nThis enables you to listen for a corresponding mouse up from a specific press, which can be very useful for\noperations such as drag and drop.\nSee the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.",
            "itemtype": "event",
            "name": "mouseup",
            "since": "0.6.0",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/MouseEvent.js",
            "line": 79,
            "description": "The normalized x position on the stage. This will always be within the range 0 to stage width.",
            "itemtype": "property",
            "name": "stageX",
            "type": "Number",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/MouseEvent.js",
            "line": 86,
            "description": "The normalized y position on the stage. This will always be within the range 0 to stage height.",
            "itemtype": "property",
            "name": "stageY",
            "type": "Number",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/MouseEvent.js",
            "line": 93,
            "description": "The raw x position relative to the stage. Normally this will be the same as the stageX value, unless\nstage.mouseMoveOutside is true and the pointer is outside of the stage bounds.",
            "itemtype": "property",
            "name": "rawX",
            "type": "Number",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/MouseEvent.js",
            "line": 101,
            "description": "The raw y position relative to the stage. Normally this will be the same as the stageY value, unless\nstage.mouseMoveOutside is true and the pointer is outside of the stage bounds.",
            "itemtype": "property",
            "name": "rawY",
            "type": "Number",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/MouseEvent.js",
            "line": 109,
            "description": "The type of mouse event. This will be the same as the handler it maps to (onPress,\nonMouseDown, onMouseUp, onMouseMove, or onClick).",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/MouseEvent.js",
            "line": 117,
            "description": "The native MouseEvent generated by the browser. The properties and API for this\nevent may differ between browsers. This property will be null if the\nEaselJS property was not directly generated from a native MouseEvent.",
            "itemtype": "property",
            "name": "nativeEvent",
            "type": "MouseEvent",
            "default": "null",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/MouseEvent.js",
            "line": 127,
            "description": "For events of type \"onPress\" only you can assign a handler to the onMouseMove\nproperty. This handler will be called every time the mouse is moved until the mouse is released.\nThis is useful for operations such as drag and drop.",
            "itemtype": "property",
            "name": "onMouseMove",
            "type": "Function",
            "deprecated": true,
            "deprecationMessage": "In favour of the \"mousemove\" event. Will be removed in a future version.",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/MouseEvent.js",
            "line": 137,
            "description": "For events of type \"onPress\" only you can assign a handler to the onMouseUp\nproperty. This handler will be called every time the mouse is moved until the mouse is released.\nThis is useful for operations such as drag and drop.",
            "itemtype": "property",
            "name": "onMouseUp",
            "type": "Function",
            "deprecated": true,
            "deprecationMessage": "In favour of the \"mouseup\" event. Will be removed in a future version.",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/MouseEvent.js",
            "line": 147,
            "description": "The display object this event relates to.",
            "itemtype": "property",
            "name": "target",
            "type": "DisplayObject",
            "default": "null",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/MouseEvent.js",
            "line": 155,
            "description": "The unique id for the pointer (touch point or cursor). This will be either -1 for the mouse, or the system\nsupplied id value.",
            "itemtype": "property",
            "name": "pointerID",
            "type": "{Number}",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/MouseEvent.js",
            "line": 163,
            "description": "Indicates whether this is the primary pointer in a multitouch environment. This will always be true for the mouse.\nFor touch pointers, the first pointer in the current stack will be considered the primary pointer.",
            "itemtype": "property",
            "name": "primary",
            "type": "{Boolean}",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/MouseEvent.js",
            "line": 183,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/MouseEvent.js",
            "line": 201,
            "description": "Returns a clone of the MouseEvent instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the MouseEvent instance.",
                "type": "MouseEvent"
            },
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/events/MouseEvent.js",
            "line": 210,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/AlphaMapFilter.js",
            "line": 69,
            "class": "AlphaMapFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/AlphaMapFilter.js",
            "line": 76,
            "description": "The greyscale image (or canvas) to use as the alpha value for the result. This should be exactly the same\ndimensions as the target.",
            "itemtype": "property",
            "name": "alphaMap",
            "type": "Image|HTMLCanvasElement",
            "class": "AlphaMapFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/AlphaMapFilter.js",
            "line": 122,
            "description": "Returns a clone of this object.",
            "return": {
                "description": "A clone of the current AlphaMapFilter instance.",
                "type": "AlphaMapFilter"
            },
            "class": "AlphaMapFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/AlphaMaskFilter.js",
            "line": 68,
            "class": "AlphaMaskFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/AlphaMaskFilter.js",
            "line": 75,
            "description": "The image (or canvas) to use as the mask.",
            "itemtype": "property",
            "name": "mask",
            "type": "Image",
            "class": "AlphaMaskFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/AlphaMaskFilter.js",
            "line": 84,
            "description": "Applies the filter to the specified context.\n\n<strong>IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters\ncorrectly.</strong>",
            "itemtype": "method",
            "name": "applyFilter",
            "params": [
                {
                    "name": "ctx",
                    "description": "The 2D context to use as the source.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "x",
                    "description": "The x position to use for the source rect.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position to use for the source rect.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width to use for the source rect.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height to use for the source rect.",
                    "type": "Number"
                },
                {
                    "name": "targetCtx",
                    "description": "The 2D context to draw the result to. Defaults to the context passed to ctx.",
                    "type": "CanvasRenderingContext2D",
                    "optional": true
                },
                {
                    "name": "targetX",
                    "description": "The x position to draw the result to. Defaults to the value passed to x.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "targetY",
                    "description": "The y position to draw the result to. Defaults to the value passed to y.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "If the filter was applied successfully.",
                "type": "Boolean"
            },
            "class": "AlphaMaskFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/AlphaMaskFilter.js",
            "line": 124,
            "description": "Returns a clone of this object.",
            "return": {
                "description": "",
                "type": "AlphaMaskFilter"
            },
            "class": "AlphaMaskFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/BoxBlurFilter.js",
            "line": 65,
            "class": "BoxBlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/BoxBlurFilter.js",
            "line": 77,
            "description": "Horizontal blur radius in pixels",
            "itemtype": "property",
            "name": "blurX",
            "default": "0",
            "type": "Number",
            "class": "BoxBlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/BoxBlurFilter.js",
            "line": 85,
            "description": "Vertical blur radius in pixels",
            "itemtype": "property",
            "name": "blurY",
            "default": "0",
            "type": "Number",
            "class": "BoxBlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/BoxBlurFilter.js",
            "line": 93,
            "description": "Number of blur iterations. For example, a value of 1 will produce a rough blur. A value of 2 will produce a\nsmoother blur, but take twice as long to run.",
            "itemtype": "property",
            "name": "quality",
            "default": "1",
            "type": "Number",
            "class": "BoxBlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/BoxBlurFilter.js",
            "line": 103,
            "description": "Returns a rectangle with values indicating the margins required to draw the filter.\nFor example, a filter that will extend the drawing area 4 pixels to the left, and 7 pixels to the right\n(but no pixels up or down) would return a rectangle with (x=-4, y=0, width=11, height=0). Note that currently\nblur qualities above 1 may not be properly accounted for.",
            "itemtype": "method",
            "name": "getBounds",
            "return": {
                "description": "a rectangle object indicating the margins required to draw the filter.",
                "type": "Rectangle"
            },
            "class": "BoxBlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/BoxBlurFilter.js",
            "line": 248,
            "description": "Returns a clone of this object.",
            "return": {
                "description": "",
                "type": "BoxBlurFilter"
            },
            "class": "BoxBlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorFilter.js",
            "line": 72,
            "description": "Red channel multiplier.",
            "itemtype": "property",
            "name": "redMultiplier",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorFilter.js",
            "line": 79,
            "description": "Green channel multiplier.",
            "itemtype": "property",
            "name": "greenMultiplier",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorFilter.js",
            "line": 86,
            "description": "Blue channel multiplier.",
            "itemtype": "property",
            "name": "blueMultiplier",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorFilter.js",
            "line": 93,
            "description": "Alpha channel multiplier.",
            "itemtype": "property",
            "name": "redMultiplier",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorFilter.js",
            "line": 100,
            "description": "Red channel offset (added to value).",
            "itemtype": "property",
            "name": "redOffset",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorFilter.js",
            "line": 107,
            "description": "Green channel offset (added to value).",
            "itemtype": "property",
            "name": "greenOffset",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorFilter.js",
            "line": 114,
            "description": "Blue channel offset (added to value).",
            "itemtype": "property",
            "name": "blueOffset",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorFilter.js",
            "line": 121,
            "description": "Alpha channel offset (added to value).",
            "itemtype": "property",
            "name": "alphaOffset",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorFilter.js",
            "line": 129,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorFilter.js",
            "line": 173,
            "description": "Returns a clone of this ColorFilter instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A clone of the current ColorFilter instance.",
                "type": "ColorFilter"
            },
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrix.js",
            "line": 57,
            "description": "Array of delta values for contrast calculations.",
            "itemtype": "property",
            "name": "DELTA_INDEX",
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrix.js",
            "line": 78,
            "description": "Identity matrix values.",
            "itemtype": "property",
            "name": "IDENTITY_MATRIX",
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrix.js",
            "line": 93,
            "description": "The constant length of a color matrix.",
            "itemtype": "property",
            "name": "LENGTH",
            "type": "Number",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrix.js",
            "line": 103,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrix.js",
            "line": 114,
            "description": "Resets the matrix to identity values.",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrix.js",
            "line": 123,
            "description": "Shortcut method to adjust brightness, contrast, saturation and hue.\nEquivalent to calling adjustHue(hue), adjustContrast(contrast),\nadjustBrightness(brightness), adjustSaturation(saturation), in that order.",
            "itemtype": "method",
            "name": "adjustColor",
            "params": [
                {
                    "name": "brightness",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "contrast",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "saturation",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "hue",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrix.js",
            "line": 141,
            "description": "Adjusts the brightness of pixel color by adding the specified value to the red, green and blue channels.\nPositive values will make the image brighter, negative values will make it darker.",
            "itemtype": "method",
            "name": "adjustBrightness",
            "params": [
                {
                    "name": "value",
                    "description": "A value between -255 & 255 that will be added to the RGB channels.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrix.js",
            "line": 161,
            "description": "Adjusts the contrast of pixel color.\nPositive values will increase contrast, negative values will decrease contrast.",
            "itemtype": "method",
            "name": "adjustContrast",
            "params": [
                {
                    "name": "value",
                    "description": "A value between -100 & 100.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrix.js",
            "line": 193,
            "description": "Adjusts the color saturation of the pixel.\nPositive values will increase saturation, negative values will decrease saturation (trend towards greyscale).",
            "itemtype": "method",
            "name": "adjustSaturation",
            "params": [
                {
                    "name": "value",
                    "description": "A value between -100 & 100.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrix.js",
            "line": 218,
            "description": "Adjusts the hue of the pixel color.",
            "itemtype": "method",
            "name": "adjustHue",
            "params": [
                {
                    "name": "value",
                    "description": "A value between -180 & 180.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrix.js",
            "line": 242,
            "description": "Concatenates (multiplies) the specified matrix with this one.",
            "itemtype": "method",
            "name": "concat",
            "params": [
                {
                    "name": "matrix",
                    "description": "An array or ColorMatrix instance.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrix.js",
            "line": 255,
            "description": "Returns a clone of this ColorMatrix.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A clone of this ColorMatrix.",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrix.js",
            "line": 264,
            "description": "Return a length 25 (5x5) array instance containing this matrix's values.",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "An array holding this matrix's values.",
                "type": "Array"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrix.js",
            "line": 273,
            "description": "Copy the specified matrix's values to this matrix.",
            "itemtype": "method",
            "name": "copyMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "An array or ColorMatrix instance.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrix.js",
            "line": 289,
            "itemtype": "method",
            "name": "_multiplyMatrix",
            "access": "protected",
            "tagname": "",
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrix.js",
            "line": 310,
            "description": "Make sure values are within the specified range, hue has a limit of 180, brightness is 255, others are 100.",
            "itemtype": "method",
            "name": "_cleanValue",
            "access": "protected",
            "tagname": "",
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrix.js",
            "line": 320,
            "description": "Makes sure matrixes are 5x5 (25 long).",
            "itemtype": "method",
            "name": "_fixMatrix",
            "access": "protected",
            "tagname": "",
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrixFilter.js",
            "line": 69,
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "matrix",
                    "description": "A 4x5 matrix describing the color operation to perform.",
                    "type": "Array"
                }
            ],
            "class": "ColorMatrixFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/ColorMatrixFilter.js",
            "line": 117,
            "description": "Returns a clone of this ColorMatrixFilter instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A clone of the current ColorMatrixFilter instance.",
                "type": "ColorMatrixFilter"
            },
            "class": "ColorMatrixFilter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/Filter.js",
            "line": 69,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "Filter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/Filter.js",
            "line": 77,
            "description": "Returns a rectangle with values indicating the margins required to draw the filter.\nFor example, a filter that will extend the drawing area 4 pixels to the left, and 7 pixels to the right\n(but no pixels up or down) would return a rectangle with (x=-4, y=0, width=11, height=0).",
            "itemtype": "method",
            "name": "getBounds",
            "return": {
                "description": "a rectangle object indicating the margins required to draw the filter.",
                "type": "Rectangle"
            },
            "class": "Filter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/Filter.js",
            "line": 88,
            "description": "Applies the filter to the specified context.",
            "itemtype": "method",
            "name": "applyFilter",
            "params": [
                {
                    "name": "ctx",
                    "description": "The 2D context to use as the source.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "x",
                    "description": "The x position to use for the source rect.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position to use for the source rect.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width to use for the source rect.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height to use for the source rect.",
                    "type": "Number"
                },
                {
                    "name": "targetCtx",
                    "description": "The 2D context to draw the result to. Defaults to the context passed to ctx.",
                    "type": "CanvasRenderingContext2D",
                    "optional": true
                },
                {
                    "name": "targetX",
                    "description": "The x position to draw the result to. Defaults to the value passed to x.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "targetY",
                    "description": "The y position to draw the result to. Defaults to the value passed to y.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "If the filter was applied successfully.",
                "type": "Boolean"
            },
            "class": "Filter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/Filter.js",
            "line": 103,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Filter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/filters/Filter.js",
            "line": 113,
            "description": "Returns a clone of this Filter instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A clone of the current Filter instance.",
                "type": "Filter"
            },
            "class": "Filter",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 52,
            "description": "An identity matrix, representing a null transformation. Read-only.",
            "itemtype": "property",
            "name": "identity",
            "static": 1,
            "type": "Matrix2D",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 60,
            "description": "Multiplier for converting degrees to radians. Used internally by Matrix2D. Read-only.",
            "itemtype": "property",
            "name": "DEG_TO_RAD",
            "static": 1,
            "final": 1,
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 71,
            "description": "Position (0, 0) in a 3x3 affine transformation matrix.",
            "itemtype": "property",
            "name": "a",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 78,
            "description": "Position (0, 1) in a 3x3 affine transformation matrix.",
            "itemtype": "property",
            "name": "b",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 85,
            "description": "Position (1, 0) in a 3x3 affine transformation matrix.",
            "itemtype": "property",
            "name": "c",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 92,
            "description": "Position (1, 1) in a 3x3 affine transformation matrix.",
            "itemtype": "property",
            "name": "d",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 99,
            "description": "Position (2, 0) in a 3x3 affine transformation matrix.",
            "itemtype": "property",
            "name": "tx",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 106,
            "description": "Position (2, 1) in a 3x3 affine transformation matrix.",
            "itemtype": "property",
            "name": "ty",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 113,
            "description": "Property representing the alpha that will be applied to a display object. This is not part of matrix\noperations, but is used for operations like getConcatenatedMatrix to provide concatenated alpha values.",
            "itemtype": "property",
            "name": "alpha",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 121,
            "description": "Property representing the shadow that will be applied to a display object. This is not part of matrix\noperations, but is used for operations like getConcatenatedMatrix to provide concatenated shadow values.",
            "itemtype": "property",
            "name": "shadow",
            "type": "Shadow",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 129,
            "description": "Property representing the compositeOperation that will be applied to a display object. This is not part of\nmatrix operations, but is used for operations like getConcatenatedMatrix to provide concatenated\ncompositeOperation values. You can find a list of valid composite operations at:\n<a href=\"https://developer.mozilla.org/en/Canvas_tutorial/Compositing\">https://developer.mozilla.org/en/Canvas_tutorial/Compositing</a>",
            "itemtype": "property",
            "name": "compositeOperation",
            "type": "String",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 140,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 157,
            "description": "Concatenates the specified matrix properties with this matrix. All parameters are required.",
            "itemtype": "method",
            "name": "prepend",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "tx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ty",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 183,
            "description": "Appends the specified matrix properties with this matrix. All parameters are required.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "tx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ty",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 209,
            "description": "Prepends the specified matrix with this matrix.",
            "itemtype": "method",
            "name": "prependMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Matrix2D"
                }
            ],
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 220,
            "description": "Appends the specified matrix with this matrix.",
            "itemtype": "method",
            "name": "appendMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Matrix2D"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 232,
            "description": "Generates matrix properties from the specified display object transform properties, and prepends them with this matrix.\nFor example, you can use this to generate a matrix from a display object: var mtx = new Matrix2D();\nmtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);",
            "itemtype": "method",
            "name": "prependTransform",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "scaleX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "scaleY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rotation",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "skewX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "skewY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "regX",
                    "description": "Optional.",
                    "type": "Number"
                },
                {
                    "name": "regY",
                    "description": "Optional.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 274,
            "description": "Generates matrix properties from the specified display object transform properties, and appends them with this matrix.\nFor example, you can use this to generate a matrix from a display object: var mtx = new Matrix2D();\nmtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);",
            "itemtype": "method",
            "name": "appendTransform",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "scaleX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "scaleY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rotation",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "skewX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "skewY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "regX",
                    "description": "Optional.",
                    "type": "Number"
                },
                {
                    "name": "regY",
                    "description": "Optional.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 318,
            "description": "Applies a rotation transformation to the matrix.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle in radians. To use degrees, multiply by <code>Math.PI/180</code>.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 341,
            "description": "Applies a skew transformation to the matrix.",
            "itemtype": "method",
            "name": "skew",
            "params": [
                {
                    "name": "skewX",
                    "description": "The amount to skew horizontally in degrees.",
                    "type": "Number"
                },
                {
                    "name": "skewY",
                    "description": "The amount to skew vertically in degrees.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 355,
            "description": "Applies a scale transformation to the matrix.",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "x",
                    "description": "The amount to scale horizontally",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The amount to scale vertically",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 372,
            "description": "Translates the matrix on the x and y axes.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 385,
            "description": "Sets the properties of the matrix to those of an identity matrix (one that applies a null transformation).",
            "itemtype": "method",
            "name": "identity",
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 397,
            "description": "Inverts the matrix, causing it to perform the opposite transformation.",
            "itemtype": "method",
            "name": "invert",
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 419,
            "description": "Returns true if the matrix is an identity matrix.",
            "itemtype": "method",
            "name": "isIdentity",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 428,
            "description": "Decomposes the matrix into transform properties (x, y, scaleX, scaleY, and rotation). Note that this these values\nmay not match the transform properties you used to generate the matrix, though they will produce the same visual\nresults.",
            "itemtype": "method",
            "name": "decompose",
            "params": [
                {
                    "name": "target",
                    "description": "The object to apply the transform properties to. If null, then a new object will be returned.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 461,
            "description": "Reinitializes all matrix properties to those specified.",
            "itemtype": "method",
            "name": "appendProperties",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "tx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ty",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "desired alpha value",
                    "type": "Number"
                },
                {
                    "name": "shadow",
                    "description": "desired shadow value",
                    "type": "Shadow"
                },
                {
                    "name": "compositeOperation",
                    "description": "desired composite operation value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 483,
            "description": "Appends the specified visual properties to the current matrix.",
            "itemtype": "method",
            "name": "appendProperties",
            "params": [
                {
                    "name": "alpha",
                    "description": "desired alpha value",
                    "type": "Number"
                },
                {
                    "name": "shadow",
                    "description": "desired shadow value",
                    "type": "Shadow"
                },
                {
                    "name": "compositeOperation",
                    "description": "desired composite operation value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 498,
            "description": "Prepends the specified visual properties to the current matrix.",
            "itemtype": "method",
            "name": "prependProperties",
            "params": [
                {
                    "name": "alpha",
                    "description": "desired alpha value",
                    "type": "Number"
                },
                {
                    "name": "shadow",
                    "description": "desired shadow value",
                    "type": "Shadow"
                },
                {
                    "name": "compositeOperation",
                    "description": "desired composite operation value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 513,
            "description": "Returns a clone of the Matrix2D instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Matrix2D instance.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Matrix2D.js",
            "line": 526,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Point.js",
            "line": 52,
            "description": "X position.",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Point",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Point.js",
            "line": 59,
            "description": "Y position.",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Point",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Point.js",
            "line": 67,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "Point",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Point.js",
            "line": 78,
            "description": "Returns a clone of the Point instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Point instance.",
                "type": "Point"
            },
            "class": "Point",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Point.js",
            "line": 87,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Point",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Rectangle.js",
            "line": 53,
            "description": "X position.",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Rectangle.js",
            "line": 60,
            "description": "Y position.",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Rectangle.js",
            "line": 67,
            "description": "Width.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Rectangle.js",
            "line": 74,
            "description": "Height.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Rectangle.js",
            "line": 82,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Rectangle.js",
            "line": 95,
            "description": "Returns a clone of the Rectangle instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Rectangle instance.",
                "type": "Rectangle"
            },
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/geom/Rectangle.js",
            "line": 104,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/ButtonHelper.js",
            "line": 72,
            "description": "Read-only. The target for this button helper.",
            "itemtype": "property",
            "name": "target",
            "type": "MovieClip | BitmapAnimation",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/ButtonHelper.js",
            "line": 79,
            "description": "The label name or frame number to display when the user mouses out of the target. Defaults to \"over\".",
            "itemtype": "property",
            "name": "overLabel",
            "type": "String | Number",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/ButtonHelper.js",
            "line": 86,
            "description": "The label name or frame number to display when the user mouses over the target. Defaults to \"out\".",
            "itemtype": "property",
            "name": "outLabel",
            "type": "String | Number",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/ButtonHelper.js",
            "line": 93,
            "description": "The label name or frame number to display when the user presses on the target. Defaults to \"down\".",
            "itemtype": "property",
            "name": "downLabel",
            "type": "String | Number",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/ButtonHelper.js",
            "line": 100,
            "description": "If true, then ButtonHelper will call gotoAndPlay, if false, it will use gotoAndStop. Default is false.",
            "itemtype": "property",
            "name": "play",
            "default": "false",
            "type": "Boolean",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/ButtonHelper.js",
            "line": 109,
            "itemtype": "property",
            "name": "_isPressed",
            "type": "Boolean",
            "access": "protected",
            "tagname": "",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/ButtonHelper.js",
            "line": 116,
            "itemtype": "property",
            "name": "_isPressed",
            "type": "Boolean",
            "access": "protected",
            "tagname": "",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/ButtonHelper.js",
            "line": 124,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/ButtonHelper.js",
            "line": 149,
            "description": "Enables or disables the button functionality on the target.",
            "itemtype": "method",
            "name": "setEnabled",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/ButtonHelper.js",
            "line": 167,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/ButtonHelper.js",
            "line": 178,
            "itemtype": "method",
            "name": "handleEvent",
            "access": "protected",
            "tagname": "",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/Touch.js",
            "line": 61,
            "description": "Returns true if touch is supported in the current browser.",
            "itemtype": "method",
            "name": "isSupported",
            "return": {
                "description": "Indicates whether touch is supported in the current browser.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/Touch.js",
            "line": 72,
            "description": "Enables touch interaction for the specified EaselJS stage. Currently supports iOS (and compatible browsers, such\nas modern Android browsers), and IE10. Supports both single touch and multi-touch modes. Extends the EaselJS\nMouseEvent model, but without support for double click or over/out events. See <code>MouseEvent.pointerID</code>\nfor more information.",
            "itemtype": "method",
            "name": "enable",
            "params": [
                {
                    "name": "stage",
                    "description": "The stage to enable touch on.",
                    "type": "Stage"
                },
                {
                    "name": "singleTouch",
                    "description": "If true, only a single touch will be active at a time.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "allowDefault",
                    "description": "If true, then default gesture actions (ex. scrolling, zooming) will be\nallowed when the user is interacting with the target canvas.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Returns true if touch was successfully enabled on the target stage.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/Touch.js",
            "line": 98,
            "description": "Removes all listeners that were set up when calling Touch.enable on a stage.",
            "itemtype": "method",
            "name": "disable",
            "params": [
                {
                    "name": "stage",
                    "description": "The stage to disable touch on.",
                    "type": "Stage"
                }
            ],
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/Touch.js",
            "line": 112,
            "itemtype": "method",
            "name": "_IOS_enable",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "stage",
                    "description": "",
                    "type": "Stage"
                }
            ],
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/Touch.js",
            "line": 127,
            "itemtype": "method",
            "name": "_IOS_disable",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "stage",
                    "description": "",
                    "type": "Stage"
                }
            ],
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/Touch.js",
            "line": 143,
            "itemtype": "method",
            "name": "_IOS_handleEvent",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/Touch.js",
            "line": 168,
            "itemtype": "method",
            "name": "_IE_enable",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "stage",
                    "description": "",
                    "type": "Stage"
                }
            ],
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/Touch.js",
            "line": 185,
            "itemtype": "method",
            "name": "_IE_enable",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "stage",
                    "description": "",
                    "type": "Stage"
                }
            ],
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/Touch.js",
            "line": 201,
            "itemtype": "method",
            "name": "_IE_handleEvent",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/Touch.js",
            "line": 228,
            "itemtype": "method",
            "name": "_handleStart",
            "access": "protected",
            "tagname": "",
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/Touch.js",
            "line": 242,
            "itemtype": "method",
            "name": "_handleMove",
            "access": "protected",
            "tagname": "",
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/ui/Touch.js",
            "line": 251,
            "itemtype": "method",
            "name": "_handleEnd",
            "access": "protected",
            "tagname": "",
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Log.js",
            "line": 42,
            "description": "Read-only. Output no messages.",
            "type": "Number",
            "itemtype": "property",
            "name": "NONE",
            "default": "0",
            "static": 1,
            "class": "Log",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Log.js",
            "line": 51,
            "description": "Read-only. Error messages.",
            "type": "Number",
            "itemtype": "property",
            "name": "ERROR",
            "default": "1",
            "static": 1,
            "class": "Log",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Log.js",
            "line": 60,
            "description": "Read-only. Warning messages.",
            "type": "Number",
            "itemtype": "property",
            "name": "WARNING",
            "default": "2",
            "static": 1,
            "class": "Log",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Log.js",
            "line": 69,
            "description": "Read-only. Trace messages.",
            "type": "Number",
            "itemtype": "property",
            "name": "TRACE",
            "default": "3",
            "static": 1,
            "class": "Log",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Log.js",
            "line": 78,
            "description": "Read-only. Output all messages.",
            "type": "Number",
            "itemtype": "property",
            "name": "ALL",
            "default": "255",
            "static": 1,
            "class": "Log",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Log.js",
            "line": 87,
            "description": "Defines the function that will be used to handle any logged messages. By default it will use console.log. The\nspecified function will be passed the same three parameters as Log.log, but the message will\nbe expanded if a matching key was found.<br/><br/>\nFor example, you could use this to log any messages to a server, or output it to a TextArea. You can disable all\nlogging by setting this to null.<br/><br/>\nAll messages are passed to the out function regardless of level settings, and the function must handle the level\nappropriately. This is to allow, for example, functions that log all messages to a server, but only display\nmessages under the current level in the UI.",
            "type": "Function",
            "itemtype": "property",
            "name": "out",
            "static": 1,
            "class": "Log",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Log.js",
            "line": 107,
            "description": "Specifies the level of messages to output. For example, if you set <code>Log.level = Log.WARNING</code>, then any \nmessages with a level of 2 (Log.WARNING) or less (ex. Log.ERROR) will be output. Defaults to Log.ALL.",
            "type": "Function",
            "itemtype": "property",
            "name": "out",
            "default": "255",
            "static": 1,
            "class": "Log",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Log.js",
            "line": 117,
            "itemtype": "property",
            "name": "_keys",
            "static": 1,
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "class": "Log",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Log.js",
            "line": 125,
            "description": "Adds a definition object that associates one or more keys with longer messages. \nThese messages can optionally include \"%DETAILS%\" which will be replaced by any details passed\nwith the error. For example:<br/>\nLog.addKeys( {MY_ERROR:\"This is a description of my error [%DETAILS%]\"} );\nLog.error( \"MY_ERROR\" , 5 ); // outputs \"This is a description of my error [5]\"",
            "params": [
                {
                    "name": "keys",
                    "description": "The generic object defining the keys and messages.",
                    "type": "Object"
                }
            ],
            "static": 1,
            "itemtype": "method",
            "name": "addKeys",
            "class": "Log",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Log.js",
            "line": 139,
            "description": "Outputs the specified error via the method assigned to the \"out\" property. If the error matches a key in any of the\nloaded def objects, it will substitute that message.",
            "params": [
                {
                    "name": "message",
                    "description": "The error message or key to output.",
                    "type": "String"
                },
                {
                    "name": "details",
                    "description": "Any details associated with this message.",
                    "type": "Object"
                },
                {
                    "name": "level",
                    "description": "A number between 1 and 254 specifying the severity of this message. See Log.level for details.",
                    "type": "Number"
                }
            ],
            "static": 1,
            "itemtype": "method",
            "name": "error",
            "class": "Log",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 59,
            "description": "Dispatched when a build completes.",
            "itemtype": "event",
            "name": "complete",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                }
            ],
            "since": "0.6.0",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 67,
            "description": "Dispatched when an asynchronous build has progress.",
            "itemtype": "event",
            "name": "complete",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "progress",
                    "description": "The current progress value (0-1).",
                    "type": "Number"
                }
            ],
            "since": "0.6.0",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 78,
            "description": "The maximum width for the images (not individual frames) in the generated sprite sheet. It is recommended to use\na power of 2 for this value (ex. 1024, 2048, 4096). If the frames cannot all fit within the max dimensions, then\nadditional images will be created as needed.",
            "itemtype": "property",
            "name": "maxWidth",
            "type": "Number",
            "default": "2048",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 88,
            "description": "The maximum height for the images (not individual frames) in the generated sprite sheet. It is recommended to use\na power of 2 for this value (ex. 1024, 2048, 4096). If the frames cannot all fit within the max dimensions, then\nadditional images will be created as needed.",
            "itemtype": "property",
            "name": "maxHeight",
            "type": "Number",
            "default": "2048",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 98,
            "description": "The sprite sheet that was generated. This will be null before a build is completed successfully.",
            "itemtype": "property",
            "name": "spriteSheet",
            "type": "SpriteSheet",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 105,
            "description": "The scale to apply when drawing all frames to the sprite sheet. This is multiplied against any scale specified\nin the addFrame call. This can be used, for example, to generate a sprite sheet at run time that is tailored to\nthe a specific device resolution (ex. tablet vs mobile).",
            "itemtype": "property",
            "name": "defaultScale",
            "type": "Number",
            "default": "1",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 115,
            "description": "The padding to use between frames. This is helpful to preserve antialiasing on drawn vector content.",
            "itemtype": "property",
            "name": "padding",
            "type": "Number",
            "default": "1",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 123,
            "description": "A number from 0.01 to 0.99 that indicates what percentage of time the builder can use. This can be\nthought of as the number of seconds per second the builder will use. For example, with a timeSlice value of 0.3,\nthe builder will run 20 times per second, using approximately 15ms per build (30% of available time, or 0.3s per second).\nDefaults to 0.3.",
            "itemtype": "property",
            "name": "timeSlice",
            "type": "Number",
            "default": "0.3",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 134,
            "description": "Read-only. A value between 0 and 1 that indicates the progress of a build, or -1 if a build has not\nbeen initiated.",
            "itemtype": "property",
            "name": "progress",
            "type": "Number",
            "default": "-1",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 143,
            "itemtype": "property",
            "name": "onComplete",
            "type": "Function",
            "default": "null",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 150,
            "description": "Callback function to call when a build completes. Called with a single parameter pointing back to this instance.",
            "itemtype": "property",
            "name": "onComplete",
            "type": "Function",
            "deprecated": true,
            "deprecationMessage": "In favour of the \"complete\" event. Will be removed in a future version.",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 158,
            "description": "Callback to call when an asynchronous build has progress. Called with two parameters, a reference back to this\ninstance, and the current progress value (0-1).",
            "itemtype": "property",
            "name": "onProgress",
            "type": "Function",
            "deprecated": true,
            "deprecationMessage": "In favour of the \"progress\" event. Will be removed in a future version.",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 179,
            "itemtype": "property",
            "name": "_frames",
            "access": "protected",
            "tagname": "",
            "type": "Array",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 186,
            "itemtype": "property",
            "name": "_animations",
            "access": "protected",
            "tagname": "",
            "type": "Array",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 193,
            "itemtype": "property",
            "name": "_data",
            "access": "protected",
            "tagname": "",
            "type": "Array",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 200,
            "itemtype": "property",
            "name": "_nextFrameIndex",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 207,
            "itemtype": "property",
            "name": "_index",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 214,
            "itemtype": "property",
            "name": "_timerID",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 221,
            "itemtype": "property",
            "name": "_scale",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 229,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 241,
            "description": "Adds a frame to the {{#crossLink \"SpriteSheet\"}}{{/crossLink}}. Note that the frame will not be drawn until you\ncall {{#crossLink \"SpriteSheetBuilder/build\"}}{{/crossLink}} method. The optional setup params allow you to have\na function run immediately before the draw occurs. For example, this allows you to add a single source multiple\ntimes, but manipulate it or it's children to change it to generate different frames.\n\nNote that the source's transformations (x, y, scale, rotate, alpha) will be ignored, except for regX/Y. To apply\ntransforms to a source object and have them captured in the sprite sheet, simply place it into a {{#crossLink \"Container\"}}{{/crossLink}}\nand pass in the Container as the source.",
            "itemtype": "method",
            "name": "addFrame",
            "params": [
                {
                    "name": "source",
                    "description": "The source {{#crossLink \"DisplayObject\"}}{{/crossLink}}  to draw as the frame.",
                    "type": "DisplayObject"
                },
                {
                    "name": "sourceRect",
                    "description": "A {{#crossLink \"Rectangle\"}}{{/crossLink}} defining the portion of the\nsource to draw to the frame. If not specified, it will look for a <code>getBounds</code> method, bounds property,\nor <code>nominalBounds</code> property on the source to use. If one is not found, the frame will be skipped.",
                    "type": "Rectangle",
                    "optional": true
                },
                {
                    "name": "scale",
                    "description": "Optional. The scale to draw this frame at. Default is 1.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "setupFunction",
                    "description": "Optional. A function to call immediately before drawing this frame.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "setupParams",
                    "description": "Parameters to pass to the setup function.",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "setupScope",
                    "description": "The scope to call the setupFunction in.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The index of the frame that was just added, or null if a sourceRect could not be determined.",
                "type": "Number"
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 270,
            "description": "Adds an animation that will be included in the created sprite sheet.",
            "itemtype": "method",
            "name": "addAnimation",
            "params": [
                {
                    "name": "name",
                    "description": "The name for the animation.",
                    "type": "String"
                },
                {
                    "name": "frames",
                    "description": "An array of frame indexes that comprise the animation. Ex. [3,6,5] would describe an animation\nthat played frame indexes 3, 6, and 5 in that order.",
                    "type": "Array"
                },
                {
                    "name": "next",
                    "description": "Specifies the name of the animation to continue to after this animation ends. You can\nalso pass false to have the animation stop when it ends. By default it will loop to the start of the same animation.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "frequency",
                    "description": "Specifies a frame advance frequency for this animation. For example, a value\nof 2 would cause the animation to advance every second tick.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 286,
            "description": "This will take a MovieClip, and add its frames and labels to this builder. Labels will be added as an animation\nrunning from the label index to the next label. For example, if there is a label named \"foo\" at frame 0 and a label\nnamed \"bar\" at frame 10, in a MovieClip with 15 frames, it will add an animation named \"foo\" that runs from frame\nindex 0 to 9, and an animation named \"bar\" that runs from frame index 10 to 14.\n\nNote that this will iterate through the full MovieClip with actionsEnabled set to false, ending on the last frame.",
            "itemtype": "method",
            "name": "addMovieClip",
            "params": [
                {
                    "name": "source",
                    "description": "The source MovieClip to add to the sprite sheet.",
                    "type": "MovieClip"
                },
                {
                    "name": "sourceRect",
                    "description": "A {{#crossLink \"Rectangle\"}}{{/crossLink}} defining the portion of the source to\ndraw to the frame. If not specified, it will look for a <code>getBounds</code> method, <code>frameBounds</code>\nArray, <code>bounds</code> property, or <code>nominalBounds</code> property on the source to use. If one is not\nfound, the MovieClip will be skipped.",
                    "type": "Rectangle",
                    "optional": true
                },
                {
                    "name": "scale",
                    "description": "The scale to draw the movie clip at.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 337,
            "description": "Builds a SpriteSheet instance based on the current frames.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "SpriteSheet The created SpriteSheet instance, or null if a build is already running or an error occurred."
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 350,
            "description": "Asynchronously builds a {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instance based on the current frames. It will\nrun 20 times per second, using an amount of time defined by <code>timeSlice</code>. When it is complete it will\ncall the specified callback.",
            "itemtype": "method",
            "name": "buildAsync",
            "params": [
                {
                    "name": "timeSlice",
                    "description": "Sets the timeSlice property on this instance.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 365,
            "description": "Stops the current asynchronous build.",
            "itemtype": "method",
            "name": "stopAsync",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 374,
            "description": "SpriteSheetBuilder instances cannot be cloned.",
            "itemtype": "method",
            "name": "clone",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 382,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 392,
            "itemtype": "method",
            "name": "_startBuild",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 432,
            "itemtype": "method",
            "name": "_fillRow",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "The width & height of the row.",
                "type": "Number"
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 443,
            "itemtype": "method",
            "name": "_fillRow",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "The width & height of the row.",
                "type": "Number"
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 476,
            "itemtype": "method",
            "name": "_endBuild",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 488,
            "itemtype": "method",
            "name": "_run",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetBuilder.js",
            "line": 510,
            "itemtype": "method",
            "name": "_drawNext",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "Boolean Returns false if this is the last draw."
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetUtils.js",
            "line": 46,
            "itemtype": "property",
            "name": "_workingCanvas",
            "static": 1,
            "type": "HTMLCanvasElement | Object",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheetUtils",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetUtils.js",
            "line": 54,
            "itemtype": "property",
            "name": "_workingContext",
            "static": 1,
            "type": "CanvasRenderingContext2D",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheetUtils",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetUtils.js",
            "line": 63,
            "description": "<b>This is an experimental method, and may be buggy. Please report issues.</b><br/><br/>\nExtends the existing sprite sheet by flipping the original frames horizontally, vertically, or both,\nand adding appropriate animation & frame data. The flipped animations will have a suffix added to their names\n(_h, _v, _hv as appropriate). Make sure the sprite sheet images are fully loaded before using this method.\n<br/><br/>\nFor example:<br/>\nSpriteSheetUtils.addFlippedFrames(mySpriteSheet, true, true);\nThe above would add frames that are flipped horizontally AND frames that are flipped vertically.\n<br/><br/>\nNote that you can also flip any display object by setting its scaleX or scaleY to a negative value. On some\nbrowsers (especially those without hardware accelerated canvas) this can result in slightly degraded performance,\nwhich is why addFlippedFrames is available.",
            "itemtype": "method",
            "name": "addFlippedFrames",
            "static": 1,
            "params": [
                {
                    "name": "spriteSheet",
                    "description": "",
                    "type": "SpriteSheet"
                },
                {
                    "name": "horizontal",
                    "description": "If true, horizontally flipped frames will be added.",
                    "type": "Boolean"
                },
                {
                    "name": "vertical",
                    "description": "If true, vertically flipped frames will be added.",
                    "type": "Boolean"
                },
                {
                    "name": "both",
                    "description": "If true, frames that are flipped both horizontally and vertically will be added.",
                    "type": "Boolean"
                }
            ],
            "class": "SpriteSheetUtils",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetUtils.js",
            "line": 92,
            "description": "Returns a single frame of the specified sprite sheet as a new PNG image.\n\n<strong>WARNING:</strong> In almost all cases it is better to display a single frame using a {{#crossLink \"BitmapAnimation\"}}{{/crossLink}}\nwith a {{#crossLink \"BitmapAnimation/gotoAndStop\"}}{{/crossLink}} call than it is to slice out a frame using this\nmethod and display it with a Bitmap instance. You can also crop an image using the <code>sourceRect</code>\nproperty of {{#crossLink \"Bitmap\"}}{{/crossLink}}.\n\nThe extractFrame method may cause cross-domain warnings since it accesses pixels directly on the canvas.",
            "itemtype": "method",
            "name": "extractFrame",
            "static": 1,
            "params": [
                {
                    "name": "spriteSheet",
                    "description": "The SpriteSheet instance to extract a frame from.",
                    "type": "Image"
                },
                {
                    "name": "frame",
                    "description": "The frame number or animation name to extract. If an animation\nname is specified, only the first frame of the animation will be extracted.",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "a single frame of the specified sprite sheet as a new PNG image.",
                "type": "Image"
            },
            "class": "SpriteSheetUtils",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/SpriteSheetUtils.js",
            "line": 124,
            "description": "Merges the rgb channels of one image with the alpha channel of another. This can be used to combine a compressed\nJPEG image containing color data with a PNG32 monochromatic image containing alpha data. With certain types of\nimages (those with detail that lend itself to JPEG compression) this can provide significant file size savings\nversus a single RGBA PNG32. This method is very fast (generally on the order of 1-2 ms to run).",
            "itemtype": "method",
            "name": "mergeAlpha",
            "static": 1,
            "params": [
                {
                    "name": "rbgImage",
                    "description": "The image (or canvas) containing the RGB channels to use.",
                    "type": "Image"
                },
                {
                    "name": "alphaImage",
                    "description": "The image (or canvas) containing the alpha channel to use.",
                    "type": "Image"
                },
                {
                    "name": "canvas",
                    "description": "Optional. If specified, this canvas will be used and returned. If not, a new canvas will be created.",
                    "type": "Canvas"
                }
            ],
            "return": {
                "description": "A canvas with the combined image data. This can be used as a source for Bitmap or SpriteSheet.",
                "type": "Canvas"
            },
            "class": "SpriteSheetUtils",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 67,
            "description": "Dispatched each tick. The event will be dispatched to each listener even when the Ticker has been paused using\n{{#crossLink \"Ticker/setPaused\"}}{{/crossLink}}.\n\n<h4>Example</h4>\n     createjs.Ticker.addEventListener(\"tick\", handleTick);\n     function handleTick(event) {\n         console.log(\"Paused:\", event.paused, event.delta);\n     }",
            "itemtype": "event",
            "name": "tick",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "paused",
                    "description": "Indicates whether the ticker is currently paused.",
                    "type": "Boolean"
                },
                {
                    "name": "delta",
                    "description": "The time elapsed in ms since the last tick.",
                    "type": "Number"
                },
                {
                    "name": "time",
                    "description": "The total time in ms since Ticker was initialized.",
                    "type": "Number"
                },
                {
                    "name": "runTime",
                    "description": "The total time in ms that Ticker was not paused since it was initialized. For example,\n\tyou could determine the amount of time that the Ticker has been paused since initialization with time-runTime.",
                    "type": "Number"
                }
            ],
            "since": "0.6.0",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 89,
            "description": "Indicates whether Ticker should use <code>requestAnimationFrame</code> if it is supported in the browser.\nIf false, Ticker will use <code>setTimeout</code>. If you use RAF, it is recommended that you set the framerate\nto a divisor of 60 (ex. 15, 20, 30, 60).",
            "itemtype": "property",
            "name": "useRAF",
            "static": 1,
            "type": "{Boolean}",
            "default": "false",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 113,
            "itemtype": "property",
            "name": "_listeners",
            "type": "{Array}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 120,
            "itemtype": "property",
            "name": "_pauseable",
            "type": "{Array}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 127,
            "itemtype": "property",
            "name": "_paused",
            "type": "{Boolean}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 134,
            "itemtype": "property",
            "name": "_inited",
            "type": "{Boolean}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 141,
            "itemtype": "property",
            "name": "_startTime",
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 148,
            "itemtype": "property",
            "name": "_pausedTime",
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 155,
            "description": "The number of ticks that have passed",
            "itemtype": "property",
            "name": "_ticks",
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 163,
            "description": "The number of ticks that have passed while Ticker has been paused",
            "itemtype": "property",
            "name": "_pausedTicks",
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 171,
            "itemtype": "property",
            "name": "_interval",
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 178,
            "itemtype": "property",
            "name": "_lastTime",
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 185,
            "itemtype": "property",
            "name": "_times",
            "type": "{Array}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 192,
            "itemtype": "property",
            "name": "_tickTimes",
            "type": "{Array}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 199,
            "itemtype": "property",
            "name": "_rafActive",
            "type": "{Boolean}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 206,
            "itemtype": "property",
            "name": "_timeoutID",
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 215,
            "description": "Adds a listener for the tick event. The listener must be either an object exposing a <code>tick</code> method,\nor a function. The listener will be called once each tick / interval. The interval is specified via the \n<code>.setInterval(ms)</code> method.\nThe tick method or function is passed two parameters: the elapsed time between the previous tick and the current\none, and a boolean indicating whether Ticker is paused.",
            "itemtype": "method",
            "name": "addListener",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "The object or function to add as a listener.",
                    "type": "Object"
                },
                {
                    "name": "pauseable",
                    "description": "If false, the listener will continue to have tick called \neven when Ticker is paused via Ticker.pause(). Default is true.",
                    "type": "Boolean"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "In favour of the \"tick\" event. Will be removed in a future version. Use \"addEventListener\" instead.",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 235,
            "description": "Initializes or resets the timer, clearing all associated listeners and fps measuring data, starting the tick.\nThis is called automatically when the first listener is added.",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 251,
            "description": "Removes the specified listener.",
            "itemtype": "method",
            "name": "removeListener",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "The object or function to remove from listening from the tick event.",
                    "type": "Object"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "In favour of the \"tick\" event. Will be removed in a future version. Use \"removeEventListener\"\ninstead.",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 269,
            "description": "Removes all listeners.",
            "itemtype": "method",
            "name": "removeAllListeners",
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "In favour of the \"tick\" event. Will be removed in a future version. Use \"removeAllEventListeners\"\ninstead.",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 281,
            "description": "Sets the target time (in milliseconds) between ticks. Default is 50 (20 FPS).\n\nNote actual time between ticks may be more than requested depending on CPU load.",
            "itemtype": "method",
            "name": "setInterval",
            "static": 1,
            "params": [
                {
                    "name": "interval",
                    "description": "Time in milliseconds between ticks. Default value is 50.",
                    "type": "Number"
                }
            ],
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 295,
            "description": "Returns the current target time between ticks, as set with {{#crossLink \"Ticker/setInterval\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getInterval",
            "static": 1,
            "return": {
                "description": "The current target interval in milliseconds between tick events.",
                "type": "Number"
            },
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 305,
            "description": "Sets the target frame rate in frames per second (FPS). For example, with an interval of 40, <code>getFPS()</code>\nwill return 25 (1000ms per second divided by 40 ms per tick = 25fps).",
            "itemtype": "method",
            "name": "setFPS",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "Target number of ticks broadcast per second.",
                    "type": "Number"
                }
            ],
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 316,
            "description": "Returns the target frame rate in frames per second (FPS). For example, with an interval of 40, <code>getFPS()</code>\nwill return 25 (1000ms per second divided by 40 ms per tick = 25fps).",
            "itemtype": "method",
            "name": "getFPS",
            "static": 1,
            "return": {
                "description": "The current target number of frames / ticks broadcast per second.",
                "type": "Number"
            },
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 327,
            "description": "Returns the actual frames / ticks per second.",
            "itemtype": "method",
            "name": "getMeasuredFPS",
            "static": 1,
            "params": [
                {
                    "name": "ticks",
                    "description": "The number of previous ticks over which to measure the actual frames / ticks per second.\nDefaults to the number of ticks per second.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The actual frames / ticks per second. Depending on performance, this may differ\nfrom the target frames per second.",
                "type": "Number"
            },
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 345,
            "description": "Changes the \"paused\" state of the Ticker, which can be retrieved by the {{#crossLink \"Ticker/getPaused\"}}{{/crossLink}}\nmethod, and is passed as the \"paused\" property of the <code>tick</code> event. When the ticker is paused, all\nlisteners will still receive a tick event, but the <code>paused</code> property will be false.\n\nNote that in EaselJS v0.5.0 and earlier, \"pauseable\" listeners would <strong>not</strong> receive the tick\ncallback when Ticker was paused. This is no longer the case.\n\n<h4>Example</h4>\n     createjs.Ticker.addEventListener(\"tick\", handleTick);\n     createjs.Ticker.setPaused(true);\n     function handleTick(event) {\n         console.log(\"Paused:\", event.paused, createjs.Ticker.getPaused());\n     }",
            "itemtype": "method",
            "name": "setPaused",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "Indicates whether to pause (true) or unpause (false) Ticker.",
                    "type": "Boolean"
                }
            ],
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 368,
            "description": "Returns a boolean indicating whether Ticker is currently paused, as set with {{#crossLink \"Ticker/setPaused\"}}{{/crossLink}}.\nWhen the ticker is paused, all listeners will still receive a tick event, but this value will be false.\n\nNote that in EaselJS v0.5.0 and earlier, \"pauseable\" listeners would <strong>not</strong> receive the tick\ncallback when Ticker was paused. This is no longer the case.\n\n<h4>Example</h4>\n     createjs.Ticker.addEventListener(\"tick\", handleTick);\n     createjs.Ticker.setPaused(true);\n     function handleTick(event) {\n         console.log(\"Paused:\", createjs.Ticker.getPaused());\n     }",
            "static": 1,
            "return": {
                "description": "Whether the Ticker is currently paused.",
                "type": "Boolean"
            },
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 389,
            "description": "Returns the number of milliseconds that have elapsed since Ticker was initialized. For example, you could use\nthis in a time synchronized animation to determine the exact amount of time that has elapsed.",
            "itemtype": "method",
            "name": "getTime",
            "static": 1,
            "params": [
                {
                    "name": "runTime",
                    "description": "If true only time elapsed while Ticker was not paused will be returned.\nIf false, the value returned will be total time elapsed since the first tick event listener was added.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Number of milliseconds that have elapsed since Ticker was initialized.",
                "type": "Number"
            },
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 402,
            "description": "Returns the number of ticks that have been broadcast by Ticker.",
            "itemtype": "method",
            "name": "getTicks",
            "static": 1,
            "params": [
                {
                    "name": "pauseable",
                    "description": "Indicates whether to include ticks that would have been broadcast\nwhile Ticker was paused. If true only tick events broadcast while Ticker is not paused will be returned.\nIf false, tick events that would have been broadcast while Ticker was paused will be included in the return\nvalue. The default value is false.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "of ticks that have been broadcast.",
                "type": "Number"
            },
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 417,
            "itemtype": "method",
            "name": "_handleAF",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 430,
            "itemtype": "method",
            "name": "_handleTimeout",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 440,
            "itemtype": "method",
            "name": "_setupTick",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 457,
            "itemtype": "method",
            "name": "_tick",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/Ticker.js",
            "line": 494,
            "itemtype": "method",
            "name": "_getTime",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/UID.js",
            "line": 43,
            "itemtype": "property",
            "name": "_nextID",
            "type": "Number",
            "access": "protected",
            "tagname": "",
            "class": "UID",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/utils/UID.js",
            "line": 50,
            "description": "Returns the next unique id.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "The next unique id",
                "type": "Number"
            },
            "static": 1,
            "class": "UID",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/version.js",
            "line": 11,
            "description": "The version string for this release.",
            "itemtype": "property",
            "name": "version",
            "type": "String",
            "static": 1,
            "class": "EaselJS",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/version.js",
            "line": 19,
            "description": "The build date for this release in UTC format.",
            "itemtype": "property",
            "name": "buildDate",
            "type": "String",
            "static": 1,
            "class": "EaselJS",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/version_movieclip.js",
            "line": 3,
            "description": "Static class holding library specific information such as the version and buildDate of\nthe library.",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/version_movieclip.js",
            "line": 10,
            "description": "The version string for this release.",
            "itemtype": "property",
            "name": "version",
            "type": "String",
            "static": 1,
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "../src/easeljs/version_movieclip.js",
            "line": 19,
            "description": "The build date for this release in UTC format.",
            "itemtype": "property",
            "name": "buildDate",
            "type": "String",
            "static": 1,
            "class": "MovieClip",
            "module": "EaselJS"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nproperty color",
            "line": " ../src/easeljs/display/Shadow.js:64"
        },
        {
            "message": "Missing item type\nproperty offsetX",
            "line": " ../src/easeljs/display/Shadow.js:71"
        },
        {
            "message": "Missing item type\nproperty offsetY",
            "line": " ../src/easeljs/display/Shadow.js:78"
        },
        {
            "message": "Missing item type\nproperty blur",
            "line": " ../src/easeljs/display/Shadow.js:85"
        },
        {
            "message": "Missing item type\nReturns a clone of this Stage.",
            "line": " ../src/easeljs/display/Stage.js:447"
        },
        {
            "message": "Missing item type",
            "line": " ../src/easeljs/filters/AlphaMapFilter.js:69"
        },
        {
            "message": "Missing item type\nReturns a clone of this object.",
            "line": " ../src/easeljs/filters/AlphaMapFilter.js:122"
        },
        {
            "message": "Missing item type",
            "line": " ../src/easeljs/filters/AlphaMaskFilter.js:68"
        },
        {
            "message": "Missing item type\nReturns a clone of this object.",
            "line": " ../src/easeljs/filters/AlphaMaskFilter.js:124"
        },
        {
            "message": "Missing item type",
            "line": " ../src/easeljs/filters/BoxBlurFilter.js:65"
        },
        {
            "message": "Missing item type\nReturns a clone of this object.",
            "line": " ../src/easeljs/filters/BoxBlurFilter.js:248"
        },
        {
            "message": "Missing item type\nReturns a boolean indicating whether Ticker is currently paused, as set with {{#crossLink \"Ticker/setPaused\"}}{{/crossLink}}.\nWhen the ticker is paused, all listeners will still receive a tick event, but this value will be false.\n\nNote that in EaselJS v0.5.0 and earlier, \"pauseable\" listeners would <strong>not</strong> receive the tick\ncallback when Ticker was paused. This is no longer the case.\n\n<h4>Example</h4>\n     createjs.Ticker.addEventListener(\"tick\", handleTick);\n     createjs.Ticker.setPaused(true);\n     function handleTick(event) {\n         console.log(\"Paused:\", createjs.Ticker.getPaused());\n     }",
            "line": " ../src/easeljs/utils/Ticker.js:368"
        },
        {
            "message": "Missing item type\nStatic class holding library specific information such as the version and buildDate of\nthe library.",
            "line": " ../src/easeljs/version_movieclip.js:3"
        }
    ]
}